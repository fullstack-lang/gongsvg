// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Animate__dummysDeclaration__ models.Animate
var __Animate_time__dummyDeclaration time.Duration

// An AnimateID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAnimate updateAnimate deleteAnimate
type AnimateID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AnimateInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAnimate updateAnimate
type AnimateInput struct {
	// The Animate to submit or modify
	// in: body
	Animate *orm.AnimateAPI
}

// GetAnimates
//
// swagger:route GET /animates animates getAnimates
//
// # Get all animates
//
// Responses:
// default: genericError
//
//	200: animateDBResponse
func GetAnimates(c *gin.Context) {
	db := orm.BackRepo.BackRepoAnimate.GetDB()

	// source slice
	var animateDBs []orm.AnimateDB

	// type Values map[string][]string
	values := c.Request.URL.Query()
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			// we have a single parameter
			// we assume it is the stack
			stackParam := value[0]
			log.Println("GONG__StackPath", stackParam)
		}
	}

	query := db.Find(&animateDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	animateAPIs := make([]orm.AnimateAPI, 0)

	// for each animate, update fields from the database nullable fields
	for idx := range animateDBs {
		animateDB := &animateDBs[idx]
		_ = animateDB
		var animateAPI orm.AnimateAPI

		// insertion point for updating fields
		animateAPI.ID = animateDB.ID
		animateDB.CopyBasicFieldsToAnimate(&animateAPI.Animate)
		animateAPI.AnimatePointersEnconding = animateDB.AnimatePointersEnconding
		animateAPIs = append(animateAPIs, animateAPI)
	}

	c.JSON(http.StatusOK, animateAPIs)
}

// PostAnimate
//
// swagger:route POST /animates animates postAnimate
//
// Creates a animate
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostAnimate(c *gin.Context) {

	// Validate input
	var input orm.AnimateAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create animate
	animateDB := orm.AnimateDB{}
	animateDB.AnimatePointersEnconding = input.AnimatePointersEnconding
	animateDB.CopyBasicFieldsFromAnimate(&input.Animate)

	db := orm.BackRepo.BackRepoAnimate.GetDB()
	query := db.Create(&animateDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoAnimate.CheckoutPhaseOneInstance(&animateDB)
	animate := (*orm.BackRepo.BackRepoAnimate.Map_AnimateDBID_AnimatePtr)[animateDB.ID]

	if animate != nil {
		models.AfterCreateFromFront(&models.Stage, animate)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, animateDB)
}

// GetAnimate
//
// swagger:route GET /animates/{ID} animates getAnimate
//
// Gets the details for a animate.
//
// Responses:
// default: genericError
//
//	200: animateDBResponse
func GetAnimate(c *gin.Context) {

	// type Values map[string][]string
	values := c.Request.URL.Query()
	if len(values) == 1 {
		value := values["stack"]
		if len(value) == 1 {
			// we have a single parameter
			// we assume it is the stack
			stackParam := value[0]
			log.Println("GET params", stackParam)
		}
	}

	db := orm.BackRepo.BackRepoAnimate.GetDB()

	// Get animateDB in DB
	var animateDB orm.AnimateDB
	if err := db.First(&animateDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var animateAPI orm.AnimateAPI
	animateAPI.ID = animateDB.ID
	animateAPI.AnimatePointersEnconding = animateDB.AnimatePointersEnconding
	animateDB.CopyBasicFieldsToAnimate(&animateAPI.Animate)

	c.JSON(http.StatusOK, animateAPI)
}

// UpdateAnimate
//
// swagger:route PATCH /animates/{ID} animates updateAnimate
//
// # Update a animate
//
// Responses:
// default: genericError
//
//	200: animateDBResponse
func UpdateAnimate(c *gin.Context) {

	// Validate input
	var input orm.AnimateAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	db := orm.BackRepo.BackRepoAnimate.GetDB()

	// Get model if exist
	var animateDB orm.AnimateDB

	// fetch the animate
	query := db.First(&animateDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	animateDB.CopyBasicFieldsFromAnimate(&input.Animate)
	animateDB.AnimatePointersEnconding = input.AnimatePointersEnconding

	query = db.Model(&animateDB).Updates(animateDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	animateNew := new(models.Animate)
	animateDB.CopyBasicFieldsToAnimate(animateNew)

	// get stage instance from DB instance, and call callback function
	animateOld := (*orm.BackRepo.BackRepoAnimate.Map_AnimateDBID_AnimatePtr)[animateDB.ID]
	if animateOld != nil {
		models.AfterUpdateFromFront(&models.Stage, animateOld, animateNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the animateDB
	c.JSON(http.StatusOK, animateDB)
}

// DeleteAnimate
//
// swagger:route DELETE /animates/{ID} animates deleteAnimate
//
// # Delete a animate
//
// default: genericError
//
//	200: animateDBResponse
func DeleteAnimate(c *gin.Context) {
	db := orm.BackRepo.BackRepoAnimate.GetDB()

	// Get model if exist
	var animateDB orm.AnimateDB
	if err := db.First(&animateDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&animateDB)

	// get an instance (not staged) from DB instance, and call callback function
	animateDeleted := new(models.Animate)
	animateDB.CopyBasicFieldsToAnimate(animateDeleted)

	// get stage instance from DB instance, and call callback function
	animateStaged := (*orm.BackRepo.BackRepoAnimate.Map_AnimateDBID_AnimatePtr)[animateDB.ID]
	if animateStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, animateStaged, animateDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
