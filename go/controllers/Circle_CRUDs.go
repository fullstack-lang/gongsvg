// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Circle__dummysDeclaration__ models.Circle
var __Circle_time__dummyDeclaration time.Duration

// An CircleID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getCircle updateCircle deleteCircle
type CircleID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// CircleInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postCircle updateCircle
type CircleInput struct {
	// The Circle to submit or modify
	// in: body
	Circle *orm.CircleAPI
}

// GetCircles
//
// swagger:route GET /circles circles getCircles
//
// Get all circles
//
// Responses:
//    default: genericError
//        200: circleDBsResponse
func GetCircles(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var circles []orm.CircleDB
	query := db.Find(&circles)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each circle, update fields from the database nullable fields
	for idx := range circles {
		circle := &circles[idx]
		_ = circle
		// insertion point for updating fields
		if circle.Name_Data.Valid {
			circle.Name = circle.Name_Data.String
		}

		if circle.CX_Data.Valid {
			circle.CX = circle.CX_Data.Float64
		}

		if circle.CY_Data.Valid {
			circle.CY = circle.CY_Data.Float64
		}

		if circle.Radius_Data.Valid {
			circle.Radius = circle.Radius_Data.Float64
		}

		if circle.Color_Data.Valid {
			circle.Color = circle.Color_Data.String
		}

		if circle.FillOpacity_Data.Valid {
			circle.FillOpacity = circle.FillOpacity_Data.Float64
		}

		if circle.Stroke_Data.Valid {
			circle.Stroke = circle.Stroke_Data.String
		}

		if circle.StrokeWidth_Data.Valid {
			circle.StrokeWidth = circle.StrokeWidth_Data.Float64
		}

		if circle.StrokeDashArray_Data.Valid {
			circle.StrokeDashArray = circle.StrokeDashArray_Data.String
		}

		if circle.Transform_Data.Valid {
			circle.Transform = circle.Transform_Data.String
		}

	}

	c.JSON(http.StatusOK, circles)
}

// PostCircle
//
// swagger:route POST /circles circles postCircle
//
// Creates a circle
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: circleDBResponse
func PostCircle(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.CircleAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create circle
	circleDB := orm.CircleDB{}
	circleDB.CircleAPI = input
	// insertion point for nullable field set
	circleDB.Name_Data.String = input.Name
	circleDB.Name_Data.Valid = true

	circleDB.CX_Data.Float64 = input.CX
	circleDB.CX_Data.Valid = true

	circleDB.CY_Data.Float64 = input.CY
	circleDB.CY_Data.Valid = true

	circleDB.Radius_Data.Float64 = input.Radius
	circleDB.Radius_Data.Valid = true

	circleDB.Color_Data.String = input.Color
	circleDB.Color_Data.Valid = true

	circleDB.FillOpacity_Data.Float64 = input.FillOpacity
	circleDB.FillOpacity_Data.Valid = true

	circleDB.Stroke_Data.String = input.Stroke
	circleDB.Stroke_Data.Valid = true

	circleDB.StrokeWidth_Data.Float64 = input.StrokeWidth
	circleDB.StrokeWidth_Data.Valid = true

	circleDB.StrokeDashArray_Data.String = input.StrokeDashArray
	circleDB.StrokeDashArray_Data.Valid = true

	circleDB.Transform_Data.String = input.Transform
	circleDB.Transform_Data.Valid = true

	query := db.Create(&circleDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, circleDB)
}

// GetCircle
//
// swagger:route GET /circles/{ID} circles getCircle
//
// Gets the details for a circle.
//
// Responses:
//    default: genericError
//        200: circleDBResponse
func GetCircle(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get circle in DB
	var circle orm.CircleDB
	if err := db.First(&circle, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if circle.Name_Data.Valid {
		circle.Name = circle.Name_Data.String
	}

	if circle.CX_Data.Valid {
		circle.CX = circle.CX_Data.Float64
	}

	if circle.CY_Data.Valid {
		circle.CY = circle.CY_Data.Float64
	}

	if circle.Radius_Data.Valid {
		circle.Radius = circle.Radius_Data.Float64
	}

	if circle.Color_Data.Valid {
		circle.Color = circle.Color_Data.String
	}

	if circle.FillOpacity_Data.Valid {
		circle.FillOpacity = circle.FillOpacity_Data.Float64
	}

	if circle.Stroke_Data.Valid {
		circle.Stroke = circle.Stroke_Data.String
	}

	if circle.StrokeWidth_Data.Valid {
		circle.StrokeWidth = circle.StrokeWidth_Data.Float64
	}

	if circle.StrokeDashArray_Data.Valid {
		circle.StrokeDashArray = circle.StrokeDashArray_Data.String
	}

	if circle.Transform_Data.Valid {
		circle.Transform = circle.Transform_Data.String
	}

	c.JSON(http.StatusOK, circle)
}

// UpdateCircle
//
// swagger:route PATCH /circles/{ID} circles updateCircle
//
// Update a circle
//
// Responses:
//    default: genericError
//        200: circleDBResponse
func UpdateCircle(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var circleDB orm.CircleDB

	// fetch the circle
	query := db.First(&circleDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.CircleAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.CX_Data.Float64 = input.CX
	input.CX_Data.Valid = true

	input.CY_Data.Float64 = input.CY
	input.CY_Data.Valid = true

	input.Radius_Data.Float64 = input.Radius
	input.Radius_Data.Valid = true

	input.Color_Data.String = input.Color
	input.Color_Data.Valid = true

	input.FillOpacity_Data.Float64 = input.FillOpacity
	input.FillOpacity_Data.Valid = true

	input.Stroke_Data.String = input.Stroke
	input.Stroke_Data.Valid = true

	input.StrokeWidth_Data.Float64 = input.StrokeWidth
	input.StrokeWidth_Data.Valid = true

	input.StrokeDashArray_Data.String = input.StrokeDashArray
	input.StrokeDashArray_Data.Valid = true

	input.Transform_Data.String = input.Transform
	input.Transform_Data.Valid = true

	query = db.Model(&circleDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the circleDB
	c.JSON(http.StatusOK, circleDB)
}

// DeleteCircle
//
// swagger:route DELETE /circles/{ID} circles deleteCircle
//
// Delete a circle
//
// Responses:
//    default: genericError
func DeleteCircle(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var circleDB orm.CircleDB
	if err := db.First(&circleDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&circleDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
