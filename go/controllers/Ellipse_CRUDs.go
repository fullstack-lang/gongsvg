// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Ellipse__dummysDeclaration__ models.Ellipse
var __Ellipse_time__dummyDeclaration time.Duration

// An EllipseID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getEllipse updateEllipse deleteEllipse
type EllipseID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// EllipseInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postEllipse updateEllipse
type EllipseInput struct {
	// The Ellipse to submit or modify
	// in: body
	Ellipse *orm.EllipseAPI
}

// GetEllipses
//
// swagger:route GET /ellipses ellipses getEllipses
//
// Get all ellipses
//
// Responses:
//    default: genericError
//        200: ellipseDBsResponse
func GetEllipses(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var ellipses []orm.EllipseDB
	query := db.Find(&ellipses)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each ellipse, update fields from the database nullable fields
	for idx := range ellipses {
		ellipse := &ellipses[idx]
		_ = ellipse
		// insertion point for updating fields
		if ellipse.Name_Data.Valid {
			ellipse.Name = ellipse.Name_Data.String
		}

		if ellipse.CX_Data.Valid {
			ellipse.CX = ellipse.CX_Data.Float64
		}

		if ellipse.CY_Data.Valid {
			ellipse.CY = ellipse.CY_Data.Float64
		}

		if ellipse.RX_Data.Valid {
			ellipse.RX = ellipse.RX_Data.Float64
		}

		if ellipse.RY_Data.Valid {
			ellipse.RY = ellipse.RY_Data.Float64
		}

		if ellipse.Color_Data.Valid {
			ellipse.Color = ellipse.Color_Data.String
		}

		if ellipse.FillOpacity_Data.Valid {
			ellipse.FillOpacity = ellipse.FillOpacity_Data.Float64
		}

		if ellipse.Stroke_Data.Valid {
			ellipse.Stroke = ellipse.Stroke_Data.String
		}

		if ellipse.StrokeWidth_Data.Valid {
			ellipse.StrokeWidth = ellipse.StrokeWidth_Data.Float64
		}

		if ellipse.StrokeDashArray_Data.Valid {
			ellipse.StrokeDashArray = ellipse.StrokeDashArray_Data.String
		}

		if ellipse.Transform_Data.Valid {
			ellipse.Transform = ellipse.Transform_Data.String
		}

	}

	c.JSON(http.StatusOK, ellipses)
}

// PostEllipse
//
// swagger:route POST /ellipses ellipses postEllipse
//
// Creates a ellipse
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: ellipseDBResponse
func PostEllipse(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.EllipseAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create ellipse
	ellipseDB := orm.EllipseDB{}
	ellipseDB.EllipseAPI = input
	// insertion point for nullable field set
	ellipseDB.Name_Data.String = input.Name
	ellipseDB.Name_Data.Valid = true

	ellipseDB.CX_Data.Float64 = input.CX
	ellipseDB.CX_Data.Valid = true

	ellipseDB.CY_Data.Float64 = input.CY
	ellipseDB.CY_Data.Valid = true

	ellipseDB.RX_Data.Float64 = input.RX
	ellipseDB.RX_Data.Valid = true

	ellipseDB.RY_Data.Float64 = input.RY
	ellipseDB.RY_Data.Valid = true

	ellipseDB.Color_Data.String = input.Color
	ellipseDB.Color_Data.Valid = true

	ellipseDB.FillOpacity_Data.Float64 = input.FillOpacity
	ellipseDB.FillOpacity_Data.Valid = true

	ellipseDB.Stroke_Data.String = input.Stroke
	ellipseDB.Stroke_Data.Valid = true

	ellipseDB.StrokeWidth_Data.Float64 = input.StrokeWidth
	ellipseDB.StrokeWidth_Data.Valid = true

	ellipseDB.StrokeDashArray_Data.String = input.StrokeDashArray
	ellipseDB.StrokeDashArray_Data.Valid = true

	ellipseDB.Transform_Data.String = input.Transform
	ellipseDB.Transform_Data.Valid = true

	query := db.Create(&ellipseDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, ellipseDB)
}

// GetEllipse
//
// swagger:route GET /ellipses/{ID} ellipses getEllipse
//
// Gets the details for a ellipse.
//
// Responses:
//    default: genericError
//        200: ellipseDBResponse
func GetEllipse(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get ellipse in DB
	var ellipse orm.EllipseDB
	if err := db.First(&ellipse, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if ellipse.Name_Data.Valid {
		ellipse.Name = ellipse.Name_Data.String
	}

	if ellipse.CX_Data.Valid {
		ellipse.CX = ellipse.CX_Data.Float64
	}

	if ellipse.CY_Data.Valid {
		ellipse.CY = ellipse.CY_Data.Float64
	}

	if ellipse.RX_Data.Valid {
		ellipse.RX = ellipse.RX_Data.Float64
	}

	if ellipse.RY_Data.Valid {
		ellipse.RY = ellipse.RY_Data.Float64
	}

	if ellipse.Color_Data.Valid {
		ellipse.Color = ellipse.Color_Data.String
	}

	if ellipse.FillOpacity_Data.Valid {
		ellipse.FillOpacity = ellipse.FillOpacity_Data.Float64
	}

	if ellipse.Stroke_Data.Valid {
		ellipse.Stroke = ellipse.Stroke_Data.String
	}

	if ellipse.StrokeWidth_Data.Valid {
		ellipse.StrokeWidth = ellipse.StrokeWidth_Data.Float64
	}

	if ellipse.StrokeDashArray_Data.Valid {
		ellipse.StrokeDashArray = ellipse.StrokeDashArray_Data.String
	}

	if ellipse.Transform_Data.Valid {
		ellipse.Transform = ellipse.Transform_Data.String
	}

	c.JSON(http.StatusOK, ellipse)
}

// UpdateEllipse
//
// swagger:route PATCH /ellipses/{ID} ellipses updateEllipse
//
// Update a ellipse
//
// Responses:
//    default: genericError
//        200: ellipseDBResponse
func UpdateEllipse(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var ellipseDB orm.EllipseDB

	// fetch the ellipse
	query := db.First(&ellipseDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.EllipseAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.CX_Data.Float64 = input.CX
	input.CX_Data.Valid = true

	input.CY_Data.Float64 = input.CY
	input.CY_Data.Valid = true

	input.RX_Data.Float64 = input.RX
	input.RX_Data.Valid = true

	input.RY_Data.Float64 = input.RY
	input.RY_Data.Valid = true

	input.Color_Data.String = input.Color
	input.Color_Data.Valid = true

	input.FillOpacity_Data.Float64 = input.FillOpacity
	input.FillOpacity_Data.Valid = true

	input.Stroke_Data.String = input.Stroke
	input.Stroke_Data.Valid = true

	input.StrokeWidth_Data.Float64 = input.StrokeWidth
	input.StrokeWidth_Data.Valid = true

	input.StrokeDashArray_Data.String = input.StrokeDashArray
	input.StrokeDashArray_Data.Valid = true

	input.Transform_Data.String = input.Transform
	input.Transform_Data.Valid = true

	query = db.Model(&ellipseDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the ellipseDB
	c.JSON(http.StatusOK, ellipseDB)
}

// DeleteEllipse
//
// swagger:route DELETE /ellipses/{ID} ellipses deleteEllipse
//
// Delete a ellipse
//
// Responses:
//    default: genericError
func DeleteEllipse(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var ellipseDB orm.EllipseDB
	if err := db.First(&ellipseDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&ellipseDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
