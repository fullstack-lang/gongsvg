// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Line__dummysDeclaration__ models.Line
var __Line_time__dummyDeclaration time.Duration

// An LineID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getLine updateLine deleteLine
type LineID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// LineInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postLine updateLine
type LineInput struct {
	// The Line to submit or modify
	// in: body
	Line *orm.LineAPI
}

// GetLines
//
// swagger:route GET /lines lines getLines
//
// # Get all lines
//
// Responses:
// default: genericError
//
//	200: lineDBResponse
func GetLines(c *gin.Context) {
	db := orm.BackRepo.BackRepoLine.GetDB()

	// source slice
	var lineDBs []orm.LineDB

	// type Values map[string][]string
	values := c.Request.URL.Query()
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			// we have a single parameter
			// we assume it is the stack
			stackParam := value[0]
			log.Println("GONG__StackPath", stackParam)
		}
	}

	query := db.Find(&lineDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	lineAPIs := make([]orm.LineAPI, 0)

	// for each line, update fields from the database nullable fields
	for idx := range lineDBs {
		lineDB := &lineDBs[idx]
		_ = lineDB
		var lineAPI orm.LineAPI

		// insertion point for updating fields
		lineAPI.ID = lineDB.ID
		lineDB.CopyBasicFieldsToLine(&lineAPI.Line)
		lineAPI.LinePointersEnconding = lineDB.LinePointersEnconding
		lineAPIs = append(lineAPIs, lineAPI)
	}

	c.JSON(http.StatusOK, lineAPIs)
}

// PostLine
//
// swagger:route POST /lines lines postLine
//
// Creates a line
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostLine(c *gin.Context) {

	// Validate input
	var input orm.LineAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create line
	lineDB := orm.LineDB{}
	lineDB.LinePointersEnconding = input.LinePointersEnconding
	lineDB.CopyBasicFieldsFromLine(&input.Line)

	db := orm.BackRepo.BackRepoLine.GetDB()
	query := db.Create(&lineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoLine.CheckoutPhaseOneInstance(&lineDB)
	line := (*orm.BackRepo.BackRepoLine.Map_LineDBID_LinePtr)[lineDB.ID]

	if line != nil {
		models.AfterCreateFromFront(&models.Stage, line)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, lineDB)
}

// GetLine
//
// swagger:route GET /lines/{ID} lines getLine
//
// Gets the details for a line.
//
// Responses:
// default: genericError
//
//	200: lineDBResponse
func GetLine(c *gin.Context) {

	// type Values map[string][]string
	values := c.Request.URL.Query()
	if len(values) == 1 {
		value := values["stack"]
		if len(value) == 1 {
			// we have a single parameter
			// we assume it is the stack
			stackParam := value[0]
			log.Println("GET params", stackParam)
		}
	}

	db := orm.BackRepo.BackRepoLine.GetDB()

	// Get lineDB in DB
	var lineDB orm.LineDB
	if err := db.First(&lineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var lineAPI orm.LineAPI
	lineAPI.ID = lineDB.ID
	lineAPI.LinePointersEnconding = lineDB.LinePointersEnconding
	lineDB.CopyBasicFieldsToLine(&lineAPI.Line)

	c.JSON(http.StatusOK, lineAPI)
}

// UpdateLine
//
// swagger:route PATCH /lines/{ID} lines updateLine
//
// # Update a line
//
// Responses:
// default: genericError
//
//	200: lineDBResponse
func UpdateLine(c *gin.Context) {

	// Validate input
	var input orm.LineAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	db := orm.BackRepo.BackRepoLine.GetDB()

	// Get model if exist
	var lineDB orm.LineDB

	// fetch the line
	query := db.First(&lineDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	lineDB.CopyBasicFieldsFromLine(&input.Line)
	lineDB.LinePointersEnconding = input.LinePointersEnconding

	query = db.Model(&lineDB).Updates(lineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	lineNew := new(models.Line)
	lineDB.CopyBasicFieldsToLine(lineNew)

	// get stage instance from DB instance, and call callback function
	lineOld := (*orm.BackRepo.BackRepoLine.Map_LineDBID_LinePtr)[lineDB.ID]
	if lineOld != nil {
		models.AfterUpdateFromFront(&models.Stage, lineOld, lineNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the lineDB
	c.JSON(http.StatusOK, lineDB)
}

// DeleteLine
//
// swagger:route DELETE /lines/{ID} lines deleteLine
//
// # Delete a line
//
// default: genericError
//
//	200: lineDBResponse
func DeleteLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoLine.GetDB()

	// Get model if exist
	var lineDB orm.LineDB
	if err := db.First(&lineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&lineDB)

	// get an instance (not staged) from DB instance, and call callback function
	lineDeleted := new(models.Line)
	lineDB.CopyBasicFieldsToLine(lineDeleted)

	// get stage instance from DB instance, and call callback function
	lineStaged := (*orm.BackRepo.BackRepoLine.Map_LineDBID_LinePtr)[lineDB.ID]
	if lineStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, lineStaged, lineDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
