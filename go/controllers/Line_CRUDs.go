// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Line__dummysDeclaration__ models.Line
var __Line_time__dummyDeclaration time.Duration

// An LineID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getLine updateLine deleteLine
type LineID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// LineInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postLine updateLine
type LineInput struct {
	// The Line to submit or modify
	// in: body
	Line *orm.LineAPI
}

// GetLines
//
// swagger:route GET /lines lines getLines
//
// Get all lines
//
// Responses:
//    default: genericError
//        200: lineDBsResponse
func GetLines(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var lines []orm.LineDB
	query := db.Find(&lines)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each line, update fields from the database nullable fields
	for idx := range lines {
		line := &lines[idx]
		_ = line
		// insertion point for updating fields
		if line.Name_Data.Valid {
			line.Name = line.Name_Data.String
		}

		if line.X1_Data.Valid {
			line.X1 = line.X1_Data.Float64
		}

		if line.Y1_Data.Valid {
			line.Y1 = line.Y1_Data.Float64
		}

		if line.X2_Data.Valid {
			line.X2 = line.X2_Data.Float64
		}

		if line.Y2_Data.Valid {
			line.Y2 = line.Y2_Data.Float64
		}

		if line.Color_Data.Valid {
			line.Color = line.Color_Data.String
		}

		if line.FillOpacity_Data.Valid {
			line.FillOpacity = line.FillOpacity_Data.Float64
		}

		if line.Stroke_Data.Valid {
			line.Stroke = line.Stroke_Data.String
		}

		if line.StrokeWidth_Data.Valid {
			line.StrokeWidth = line.StrokeWidth_Data.Float64
		}

		if line.StrokeDashArray_Data.Valid {
			line.StrokeDashArray = line.StrokeDashArray_Data.String
		}

	}

	c.JSON(http.StatusOK, lines)
}

// PostLine
//
// swagger:route POST /lines lines postLine
//
// Creates a line
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: lineDBResponse
func PostLine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.LineAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create line
	lineDB := orm.LineDB{}
	lineDB.LineAPI = input
	// insertion point for nullable field set
	lineDB.Name_Data.String = input.Name
	lineDB.Name_Data.Valid = true

	lineDB.X1_Data.Float64 = input.X1
	lineDB.X1_Data.Valid = true

	lineDB.Y1_Data.Float64 = input.Y1
	lineDB.Y1_Data.Valid = true

	lineDB.X2_Data.Float64 = input.X2
	lineDB.X2_Data.Valid = true

	lineDB.Y2_Data.Float64 = input.Y2
	lineDB.Y2_Data.Valid = true

	lineDB.Color_Data.String = input.Color
	lineDB.Color_Data.Valid = true

	lineDB.FillOpacity_Data.Float64 = input.FillOpacity
	lineDB.FillOpacity_Data.Valid = true

	lineDB.Stroke_Data.String = input.Stroke
	lineDB.Stroke_Data.Valid = true

	lineDB.StrokeWidth_Data.Float64 = input.StrokeWidth
	lineDB.StrokeWidth_Data.Valid = true

	lineDB.StrokeDashArray_Data.String = input.StrokeDashArray
	lineDB.StrokeDashArray_Data.Valid = true

	query := db.Create(&lineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, lineDB)
}

// GetLine
//
// swagger:route GET /lines/{ID} lines getLine
//
// Gets the details for a line.
//
// Responses:
//    default: genericError
//        200: lineDBResponse
func GetLine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get line in DB
	var line orm.LineDB
	if err := db.First(&line, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if line.Name_Data.Valid {
		line.Name = line.Name_Data.String
	}

	if line.X1_Data.Valid {
		line.X1 = line.X1_Data.Float64
	}

	if line.Y1_Data.Valid {
		line.Y1 = line.Y1_Data.Float64
	}

	if line.X2_Data.Valid {
		line.X2 = line.X2_Data.Float64
	}

	if line.Y2_Data.Valid {
		line.Y2 = line.Y2_Data.Float64
	}

	if line.Color_Data.Valid {
		line.Color = line.Color_Data.String
	}

	if line.FillOpacity_Data.Valid {
		line.FillOpacity = line.FillOpacity_Data.Float64
	}

	if line.Stroke_Data.Valid {
		line.Stroke = line.Stroke_Data.String
	}

	if line.StrokeWidth_Data.Valid {
		line.StrokeWidth = line.StrokeWidth_Data.Float64
	}

	if line.StrokeDashArray_Data.Valid {
		line.StrokeDashArray = line.StrokeDashArray_Data.String
	}

	c.JSON(http.StatusOK, line)
}

// UpdateLine
//
// swagger:route PATCH /lines/{ID} lines updateLine
//
// Update a line
//
// Responses:
//    default: genericError
//        200: lineDBResponse
func UpdateLine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var lineDB orm.LineDB

	// fetch the line
	query := db.First(&lineDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.LineAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.X1_Data.Float64 = input.X1
	input.X1_Data.Valid = true

	input.Y1_Data.Float64 = input.Y1
	input.Y1_Data.Valid = true

	input.X2_Data.Float64 = input.X2
	input.X2_Data.Valid = true

	input.Y2_Data.Float64 = input.Y2
	input.Y2_Data.Valid = true

	input.Color_Data.String = input.Color
	input.Color_Data.Valid = true

	input.FillOpacity_Data.Float64 = input.FillOpacity
	input.FillOpacity_Data.Valid = true

	input.Stroke_Data.String = input.Stroke
	input.Stroke_Data.Valid = true

	input.StrokeWidth_Data.Float64 = input.StrokeWidth
	input.StrokeWidth_Data.Valid = true

	input.StrokeDashArray_Data.String = input.StrokeDashArray
	input.StrokeDashArray_Data.Valid = true

	query = db.Model(&lineDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the lineDB
	c.JSON(http.StatusOK, lineDB)
}

// DeleteLine
//
// swagger:route DELETE /lines/{ID} lines deleteLine
//
// Delete a line
//
// Responses:
//    default: genericError
func DeleteLine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var lineDB orm.LineDB
	if err := db.First(&lineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&lineDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
