// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Path__dummysDeclaration__ models.Path
var __Path_time__dummyDeclaration time.Duration

// An PathID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPath updatePath deletePath
type PathID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PathInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPath updatePath
type PathInput struct {
	// The Path to submit or modify
	// in: body
	Path *orm.PathAPI
}

// GetPaths
//
// swagger:route GET /paths paths getPaths
//
// Get all paths
//
// Responses:
//    default: genericError
//        200: pathDBsResponse
func GetPaths(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var paths []orm.PathDB
	query := db.Find(&paths)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each path, update fields from the database nullable fields
	for idx := range paths {
		path := &paths[idx]
		_ = path
		// insertion point for updating fields
		if path.Name_Data.Valid {
			path.Name = path.Name_Data.String
		}

		if path.Definition_Data.Valid {
			path.Definition = path.Definition_Data.String
		}

		if path.Color_Data.Valid {
			path.Color = path.Color_Data.String
		}

		if path.FillOpacity_Data.Valid {
			path.FillOpacity = path.FillOpacity_Data.Float64
		}

		if path.Stroke_Data.Valid {
			path.Stroke = path.Stroke_Data.String
		}

		if path.StrokeWidth_Data.Valid {
			path.StrokeWidth = path.StrokeWidth_Data.Float64
		}

		if path.StrokeDashArray_Data.Valid {
			path.StrokeDashArray = path.StrokeDashArray_Data.String
		}

		if path.Transform_Data.Valid {
			path.Transform = path.Transform_Data.String
		}

	}

	c.JSON(http.StatusOK, paths)
}

// PostPath
//
// swagger:route POST /paths paths postPath
//
// Creates a path
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: pathDBResponse
func PostPath(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.PathAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create path
	pathDB := orm.PathDB{}
	pathDB.PathAPI = input
	// insertion point for nullable field set
	pathDB.Name_Data.String = input.Name
	pathDB.Name_Data.Valid = true

	pathDB.Definition_Data.String = input.Definition
	pathDB.Definition_Data.Valid = true

	pathDB.Color_Data.String = input.Color
	pathDB.Color_Data.Valid = true

	pathDB.FillOpacity_Data.Float64 = input.FillOpacity
	pathDB.FillOpacity_Data.Valid = true

	pathDB.Stroke_Data.String = input.Stroke
	pathDB.Stroke_Data.Valid = true

	pathDB.StrokeWidth_Data.Float64 = input.StrokeWidth
	pathDB.StrokeWidth_Data.Valid = true

	pathDB.StrokeDashArray_Data.String = input.StrokeDashArray
	pathDB.StrokeDashArray_Data.Valid = true

	pathDB.Transform_Data.String = input.Transform
	pathDB.Transform_Data.Valid = true

	query := db.Create(&pathDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, pathDB)
}

// GetPath
//
// swagger:route GET /paths/{ID} paths getPath
//
// Gets the details for a path.
//
// Responses:
//    default: genericError
//        200: pathDBResponse
func GetPath(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get path in DB
	var path orm.PathDB
	if err := db.First(&path, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if path.Name_Data.Valid {
		path.Name = path.Name_Data.String
	}

	if path.Definition_Data.Valid {
		path.Definition = path.Definition_Data.String
	}

	if path.Color_Data.Valid {
		path.Color = path.Color_Data.String
	}

	if path.FillOpacity_Data.Valid {
		path.FillOpacity = path.FillOpacity_Data.Float64
	}

	if path.Stroke_Data.Valid {
		path.Stroke = path.Stroke_Data.String
	}

	if path.StrokeWidth_Data.Valid {
		path.StrokeWidth = path.StrokeWidth_Data.Float64
	}

	if path.StrokeDashArray_Data.Valid {
		path.StrokeDashArray = path.StrokeDashArray_Data.String
	}

	if path.Transform_Data.Valid {
		path.Transform = path.Transform_Data.String
	}

	c.JSON(http.StatusOK, path)
}

// UpdatePath
//
// swagger:route PATCH /paths/{ID} paths updatePath
//
// Update a path
//
// Responses:
//    default: genericError
//        200: pathDBResponse
func UpdatePath(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var pathDB orm.PathDB

	// fetch the path
	query := db.First(&pathDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.PathAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Definition_Data.String = input.Definition
	input.Definition_Data.Valid = true

	input.Color_Data.String = input.Color
	input.Color_Data.Valid = true

	input.FillOpacity_Data.Float64 = input.FillOpacity
	input.FillOpacity_Data.Valid = true

	input.Stroke_Data.String = input.Stroke
	input.Stroke_Data.Valid = true

	input.StrokeWidth_Data.Float64 = input.StrokeWidth
	input.StrokeWidth_Data.Valid = true

	input.StrokeDashArray_Data.String = input.StrokeDashArray
	input.StrokeDashArray_Data.Valid = true

	input.Transform_Data.String = input.Transform
	input.Transform_Data.Valid = true

	query = db.Model(&pathDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the pathDB
	c.JSON(http.StatusOK, pathDB)
}

// DeletePath
//
// swagger:route DELETE /paths/{ID} paths deletePath
//
// Delete a path
//
// Responses:
//    default: genericError
func DeletePath(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var pathDB orm.PathDB
	if err := db.First(&pathDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&pathDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
