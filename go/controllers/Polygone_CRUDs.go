// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Polygone__dummysDeclaration__ models.Polygone
var __Polygone_time__dummyDeclaration time.Duration

// An PolygoneID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPolygone updatePolygone deletePolygone
type PolygoneID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PolygoneInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPolygone updatePolygone
type PolygoneInput struct {
	// The Polygone to submit or modify
	// in: body
	Polygone *orm.PolygoneAPI
}

// GetPolygones
//
// swagger:route GET /polygones polygones getPolygones
//
// Get all polygones
//
// Responses:
//    default: genericError
//        200: polygoneDBsResponse
func GetPolygones(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var polygones []orm.PolygoneDB
	query := db.Find(&polygones)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each polygone, update fields from the database nullable fields
	for idx := range polygones {
		polygone := &polygones[idx]
		_ = polygone
		// insertion point for updating fields
		if polygone.Name_Data.Valid {
			polygone.Name = polygone.Name_Data.String
		}

		if polygone.Points_Data.Valid {
			polygone.Points = polygone.Points_Data.String
		}

		if polygone.Color_Data.Valid {
			polygone.Color = polygone.Color_Data.String
		}

		if polygone.FillOpacity_Data.Valid {
			polygone.FillOpacity = polygone.FillOpacity_Data.Float64
		}

		if polygone.Stroke_Data.Valid {
			polygone.Stroke = polygone.Stroke_Data.String
		}

		if polygone.StrokeWidth_Data.Valid {
			polygone.StrokeWidth = polygone.StrokeWidth_Data.Float64
		}

		if polygone.StrokeDashArray_Data.Valid {
			polygone.StrokeDashArray = polygone.StrokeDashArray_Data.String
		}

		if polygone.Transform_Data.Valid {
			polygone.Transform = polygone.Transform_Data.String
		}

	}

	c.JSON(http.StatusOK, polygones)
}

// PostPolygone
//
// swagger:route POST /polygones polygones postPolygone
//
// Creates a polygone
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: polygoneDBResponse
func PostPolygone(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.PolygoneAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create polygone
	polygoneDB := orm.PolygoneDB{}
	polygoneDB.PolygoneAPI = input
	// insertion point for nullable field set
	polygoneDB.Name_Data.String = input.Name
	polygoneDB.Name_Data.Valid = true

	polygoneDB.Points_Data.String = input.Points
	polygoneDB.Points_Data.Valid = true

	polygoneDB.Color_Data.String = input.Color
	polygoneDB.Color_Data.Valid = true

	polygoneDB.FillOpacity_Data.Float64 = input.FillOpacity
	polygoneDB.FillOpacity_Data.Valid = true

	polygoneDB.Stroke_Data.String = input.Stroke
	polygoneDB.Stroke_Data.Valid = true

	polygoneDB.StrokeWidth_Data.Float64 = input.StrokeWidth
	polygoneDB.StrokeWidth_Data.Valid = true

	polygoneDB.StrokeDashArray_Data.String = input.StrokeDashArray
	polygoneDB.StrokeDashArray_Data.Valid = true

	polygoneDB.Transform_Data.String = input.Transform
	polygoneDB.Transform_Data.Valid = true

	query := db.Create(&polygoneDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, polygoneDB)
}

// GetPolygone
//
// swagger:route GET /polygones/{ID} polygones getPolygone
//
// Gets the details for a polygone.
//
// Responses:
//    default: genericError
//        200: polygoneDBResponse
func GetPolygone(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get polygone in DB
	var polygone orm.PolygoneDB
	if err := db.First(&polygone, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if polygone.Name_Data.Valid {
		polygone.Name = polygone.Name_Data.String
	}

	if polygone.Points_Data.Valid {
		polygone.Points = polygone.Points_Data.String
	}

	if polygone.Color_Data.Valid {
		polygone.Color = polygone.Color_Data.String
	}

	if polygone.FillOpacity_Data.Valid {
		polygone.FillOpacity = polygone.FillOpacity_Data.Float64
	}

	if polygone.Stroke_Data.Valid {
		polygone.Stroke = polygone.Stroke_Data.String
	}

	if polygone.StrokeWidth_Data.Valid {
		polygone.StrokeWidth = polygone.StrokeWidth_Data.Float64
	}

	if polygone.StrokeDashArray_Data.Valid {
		polygone.StrokeDashArray = polygone.StrokeDashArray_Data.String
	}

	if polygone.Transform_Data.Valid {
		polygone.Transform = polygone.Transform_Data.String
	}

	c.JSON(http.StatusOK, polygone)
}

// UpdatePolygone
//
// swagger:route PATCH /polygones/{ID} polygones updatePolygone
//
// Update a polygone
//
// Responses:
//    default: genericError
//        200: polygoneDBResponse
func UpdatePolygone(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var polygoneDB orm.PolygoneDB

	// fetch the polygone
	query := db.First(&polygoneDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.PolygoneAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Points_Data.String = input.Points
	input.Points_Data.Valid = true

	input.Color_Data.String = input.Color
	input.Color_Data.Valid = true

	input.FillOpacity_Data.Float64 = input.FillOpacity
	input.FillOpacity_Data.Valid = true

	input.Stroke_Data.String = input.Stroke
	input.Stroke_Data.Valid = true

	input.StrokeWidth_Data.Float64 = input.StrokeWidth
	input.StrokeWidth_Data.Valid = true

	input.StrokeDashArray_Data.String = input.StrokeDashArray
	input.StrokeDashArray_Data.Valid = true

	input.Transform_Data.String = input.Transform
	input.Transform_Data.Valid = true

	query = db.Model(&polygoneDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the polygoneDB
	c.JSON(http.StatusOK, polygoneDB)
}

// DeletePolygone
//
// swagger:route DELETE /polygones/{ID} polygones deletePolygone
//
// Delete a polygone
//
// Responses:
//    default: genericError
func DeletePolygone(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var polygoneDB orm.PolygoneDB
	if err := db.First(&polygoneDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&polygoneDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
