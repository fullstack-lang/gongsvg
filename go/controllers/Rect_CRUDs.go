// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Rect__dummysDeclaration__ models.Rect
var __Rect_time__dummyDeclaration time.Duration

// An RectID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getRect updateRect deleteRect
type RectID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// RectInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postRect updateRect
type RectInput struct {
	// The Rect to submit or modify
	// in: body
	Rect *orm.RectAPI
}

// GetRects
//
// swagger:route GET /rects rects getRects
//
// Get all rects
//
// Responses:
//    default: genericError
//        200: rectDBsResponse
func GetRects(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var rects []orm.RectDB
	query := db.Find(&rects)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each rect, update fields from the database nullable fields
	for idx := range rects {
		rect := &rects[idx]
		_ = rect
		// insertion point for updating fields
		if rect.Name_Data.Valid {
			rect.Name = rect.Name_Data.String
		}

		if rect.X_Data.Valid {
			rect.X = rect.X_Data.Float64
		}

		if rect.Y_Data.Valid {
			rect.Y = rect.Y_Data.Float64
		}

		if rect.Width_Data.Valid {
			rect.Width = rect.Width_Data.Float64
		}

		if rect.Height_Data.Valid {
			rect.Height = rect.Height_Data.Float64
		}

		if rect.Color_Data.Valid {
			rect.Color = rect.Color_Data.String
		}

	}

	c.JSON(http.StatusOK, rects)
}

// PostRect
//
// swagger:route POST /rects rects postRect
//
// Creates a rect
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: rectDBResponse
func PostRect(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.RectAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create rect
	rectDB := orm.RectDB{}
	rectDB.RectAPI = input
	// insertion point for nullable field set
	rectDB.Name_Data.String = input.Name
	rectDB.Name_Data.Valid = true

	rectDB.X_Data.Float64 = input.X
	rectDB.X_Data.Valid = true

	rectDB.Y_Data.Float64 = input.Y
	rectDB.Y_Data.Valid = true

	rectDB.Width_Data.Float64 = input.Width
	rectDB.Width_Data.Valid = true

	rectDB.Height_Data.Float64 = input.Height
	rectDB.Height_Data.Valid = true

	rectDB.Color_Data.String = input.Color
	rectDB.Color_Data.Valid = true

	query := db.Create(&rectDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, rectDB)
}

// GetRect
//
// swagger:route GET /rects/{ID} rects getRect
//
// Gets the details for a rect.
//
// Responses:
//    default: genericError
//        200: rectDBResponse
func GetRect(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get rect in DB
	var rect orm.RectDB
	if err := db.First(&rect, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if rect.Name_Data.Valid {
		rect.Name = rect.Name_Data.String
	}

	if rect.X_Data.Valid {
		rect.X = rect.X_Data.Float64
	}

	if rect.Y_Data.Valid {
		rect.Y = rect.Y_Data.Float64
	}

	if rect.Width_Data.Valid {
		rect.Width = rect.Width_Data.Float64
	}

	if rect.Height_Data.Valid {
		rect.Height = rect.Height_Data.Float64
	}

	if rect.Color_Data.Valid {
		rect.Color = rect.Color_Data.String
	}

	c.JSON(http.StatusOK, rect)
}

// UpdateRect
//
// swagger:route PATCH /rects/{ID} rects updateRect
//
// Update a rect
//
// Responses:
//    default: genericError
//        200: rectDBResponse
func UpdateRect(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var rectDB orm.RectDB

	// fetch the rect
	query := db.First(&rectDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.RectAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.X_Data.Float64 = input.X
	input.X_Data.Valid = true

	input.Y_Data.Float64 = input.Y
	input.Y_Data.Valid = true

	input.Width_Data.Float64 = input.Width
	input.Width_Data.Valid = true

	input.Height_Data.Float64 = input.Height
	input.Height_Data.Valid = true

	input.Color_Data.String = input.Color
	input.Color_Data.Valid = true

	query = db.Model(&rectDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the rectDB
	c.JSON(http.StatusOK, rectDB)
}

// DeleteRect
//
// swagger:route DELETE /rects/{ID} rects deleteRect
//
// Delete a rect
//
// Responses:
//    default: genericError
func DeleteRect(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var rectDB orm.RectDB
	if err := db.First(&rectDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&rectDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
