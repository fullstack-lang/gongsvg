// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __SVG__dummysDeclaration__ models.SVG
var __SVG_time__dummyDeclaration time.Duration

// An SVGID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getSVG updateSVG deleteSVG
type SVGID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// SVGInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postSVG updateSVG
type SVGInput struct {
	// The SVG to submit or modify
	// in: body
	SVG *orm.SVGAPI
}

// GetSVGs
//
// swagger:route GET /svgs svgs getSVGs
//
// Get all svgs
//
// Responses:
//    default: genericError
//        200: svgDBsResponse
func GetSVGs(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var svgs []orm.SVGDB
	query := db.Find(&svgs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each svg, update fields from the database nullable fields
	for idx := range svgs {
		svg := &svgs[idx]
		_ = svg
		// insertion point for updating fields
		if svg.Name_Data.Valid {
			svg.Name = svg.Name_Data.String
		}

		if svg.XML_Data.Valid {
			svg.XML = svg.XML_Data.String
		}

	}

	c.JSON(http.StatusOK, svgs)
}

// PostSVG
//
// swagger:route POST /svgs svgs postSVG
//
// Creates a svg
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: svgDBResponse
func PostSVG(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.SVGAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create svg
	svgDB := orm.SVGDB{}
	svgDB.SVGAPI = input
	// insertion point for nullable field set
	svgDB.Name_Data.String = input.Name
	svgDB.Name_Data.Valid = true

	svgDB.XML_Data.String = input.XML
	svgDB.XML_Data.Valid = true

	query := db.Create(&svgDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, svgDB)
}

// GetSVG
//
// swagger:route GET /svgs/{ID} svgs getSVG
//
// Gets the details for a svg.
//
// Responses:
//    default: genericError
//        200: svgDBResponse
func GetSVG(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get svg in DB
	var svg orm.SVGDB
	if err := db.First(&svg, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if svg.Name_Data.Valid {
		svg.Name = svg.Name_Data.String
	}

	if svg.XML_Data.Valid {
		svg.XML = svg.XML_Data.String
	}

	c.JSON(http.StatusOK, svg)
}

// UpdateSVG
//
// swagger:route PATCH /svgs/{ID} svgs updateSVG
//
// Update a svg
//
// Responses:
//    default: genericError
//        200: svgDBResponse
func UpdateSVG(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var svgDB orm.SVGDB

	// fetch the svg
	query := db.First(&svgDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.SVGAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.XML_Data.String = input.XML
	input.XML_Data.Valid = true

	query = db.Model(&svgDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the svgDB
	c.JSON(http.StatusOK, svgDB)
}

// DeleteSVG
//
// swagger:route DELETE /svgs/{ID} svgs deleteSVG
//
// Delete a svg
//
// Responses:
//    default: genericError
func DeleteSVG(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var svgDB orm.SVGDB
	if err := db.First(&svgDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&svgDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
