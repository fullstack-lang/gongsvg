// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Text__dummysDeclaration__ models.Text
var __Text_time__dummyDeclaration time.Duration

// An TextID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getText updateText deleteText
type TextID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// TextInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postText updateText
type TextInput struct {
	// The Text to submit or modify
	// in: body
	Text *orm.TextAPI
}

// GetTexts
//
// swagger:route GET /texts texts getTexts
//
// Get all texts
//
// Responses:
//    default: genericError
//        200: textDBsResponse
func GetTexts(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var texts []orm.TextDB
	query := db.Find(&texts)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each text, update fields from the database nullable fields
	for idx := range texts {
		text := &texts[idx]
		_ = text
		// insertion point for updating fields
		if text.Name_Data.Valid {
			text.Name = text.Name_Data.String
		}

		if text.X_Data.Valid {
			text.X = text.X_Data.Float64
		}

		if text.Y_Data.Valid {
			text.Y = text.Y_Data.Float64
		}

		if text.Content_Data.Valid {
			text.Content = text.Content_Data.String
		}

		if text.Color_Data.Valid {
			text.Color = text.Color_Data.String
		}

	}

	c.JSON(http.StatusOK, texts)
}

// PostText
//
// swagger:route POST /texts texts postText
//
// Creates a text
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: textDBResponse
func PostText(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.TextAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create text
	textDB := orm.TextDB{}
	textDB.TextAPI = input
	// insertion point for nullable field set
	textDB.Name_Data.String = input.Name
	textDB.Name_Data.Valid = true

	textDB.X_Data.Float64 = input.X
	textDB.X_Data.Valid = true

	textDB.Y_Data.Float64 = input.Y
	textDB.Y_Data.Valid = true

	textDB.Content_Data.String = input.Content
	textDB.Content_Data.Valid = true

	textDB.Color_Data.String = input.Color
	textDB.Color_Data.Valid = true

	query := db.Create(&textDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, textDB)
}

// GetText
//
// swagger:route GET /texts/{ID} texts getText
//
// Gets the details for a text.
//
// Responses:
//    default: genericError
//        200: textDBResponse
func GetText(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get text in DB
	var text orm.TextDB
	if err := db.First(&text, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if text.Name_Data.Valid {
		text.Name = text.Name_Data.String
	}

	if text.X_Data.Valid {
		text.X = text.X_Data.Float64
	}

	if text.Y_Data.Valid {
		text.Y = text.Y_Data.Float64
	}

	if text.Content_Data.Valid {
		text.Content = text.Content_Data.String
	}

	if text.Color_Data.Valid {
		text.Color = text.Color_Data.String
	}

	c.JSON(http.StatusOK, text)
}

// UpdateText
//
// swagger:route PATCH /texts/{ID} texts updateText
//
// Update a text
//
// Responses:
//    default: genericError
//        200: textDBResponse
func UpdateText(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var textDB orm.TextDB

	// fetch the text
	query := db.First(&textDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.TextAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.X_Data.Float64 = input.X
	input.X_Data.Valid = true

	input.Y_Data.Float64 = input.Y
	input.Y_Data.Valid = true

	input.Content_Data.String = input.Content
	input.Content_Data.Valid = true

	input.Color_Data.String = input.Color
	input.Color_Data.Valid = true

	query = db.Model(&textDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the textDB
	c.JSON(http.StatusOK, textDB)
}

// DeleteText
//
// swagger:route DELETE /texts/{ID} texts deleteText
//
// Delete a text
//
// Responses:
//    default: genericError
func DeleteText(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var textDB orm.TextDB
	if err := db.First(&textDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&textDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
