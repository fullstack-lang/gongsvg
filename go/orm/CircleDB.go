// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Circle sql.NullBool
var __Circle_time__dummyDeclaration time.Duration

// CircleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model circleAPI
type CircleAPI struct {
	models.Circle

	// insertion for fields declaration
	// Declation for basic field circleDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field circleDB.CX {{BasicKind}} (to be completed)
	CX_Data sql.NullFloat64

	// Declation for basic field circleDB.CY {{BasicKind}} (to be completed)
	CY_Data sql.NullFloat64

	// Declation for basic field circleDB.Radius {{BasicKind}} (to be completed)
	Radius_Data sql.NullFloat64

	// Declation for basic field circleDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field circleDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field circleDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field circleDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field circleDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// Declation for basic field circleDB.Transform {{BasicKind}} (to be completed)
	Transform_Data sql.NullString

	// Implementation of a reverse ID for field SVG{}.Circles []*Circle
	SVG_CirclesDBID sql.NullInt64

	// end of insertion
}

// CircleDB describes a circle in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model circleDB
type CircleDB struct {
	gorm.Model

	CircleAPI
}

// CircleDBs arrays circleDBs
// swagger:response circleDBsResponse
type CircleDBs []CircleDB

// CircleDBResponse provides response
// swagger:response circleDBResponse
type CircleDBResponse struct {
	CircleDB
}

type BackRepoCircleStruct struct {
	// stores CircleDB according to their gorm ID
	Map_CircleDBID_CircleDB *map[uint]*CircleDB

	// stores CircleDB ID according to Circle address
	Map_CirclePtr_CircleDBID *map[*models.Circle]uint

	// stores Circle according to their gorm ID
	Map_CircleDBID_CirclePtr *map[uint]*models.Circle

	db *gorm.DB
}

// BackRepoCircle.Init set up the BackRepo of the Circle
func (backRepoCircle *BackRepoCircleStruct) Init(db *gorm.DB) (Error error) {

	if backRepoCircle.Map_CircleDBID_CirclePtr != nil {
		err := errors.New("In Init, backRepoCircle.Map_CircleDBID_CirclePtr should be nil")
		return err
	}

	if backRepoCircle.Map_CircleDBID_CircleDB != nil {
		err := errors.New("In Init, backRepoCircle.Map_CircleDBID_CircleDB should be nil")
		return err
	}

	if backRepoCircle.Map_CirclePtr_CircleDBID != nil {
		err := errors.New("In Init, backRepoCircle.Map_CirclePtr_CircleDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Circle, 0)
	backRepoCircle.Map_CircleDBID_CirclePtr = &tmp

	tmpDB := make(map[uint]*CircleDB, 0)
	backRepoCircle.Map_CircleDBID_CircleDB = &tmpDB

	tmpID := make(map[*models.Circle]uint, 0)
	backRepoCircle.Map_CirclePtr_CircleDBID = &tmpID

	backRepoCircle.db = db
	return
}

// BackRepoCircle.CommitPhaseOne commits all staged instances of Circle to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCircle *BackRepoCircleStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for circle := range stage.Circles {
		backRepoCircle.CommitPhaseOneInstance(circle)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, circle := range *backRepoCircle.Map_CircleDBID_CirclePtr {
		if _, ok := stage.Circles[circle]; !ok {
			backRepoCircle.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCircle.CommitDeleteInstance commits deletion of Circle to the BackRepo
func (backRepoCircle *BackRepoCircleStruct) CommitDeleteInstance(id uint) (Error error) {

	circle := (*backRepoCircle.Map_CircleDBID_CirclePtr)[id]

	// circle is not staged anymore, remove circleDB
	circleDB := (*backRepoCircle.Map_CircleDBID_CircleDB)[id]
	query := backRepoCircle.db.Unscoped().Delete(&circleDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoCircle.Map_CirclePtr_CircleDBID), circle)
	delete((*backRepoCircle.Map_CircleDBID_CirclePtr), id)
	delete((*backRepoCircle.Map_CircleDBID_CircleDB), id)

	return
}

// BackRepoCircle.CommitPhaseOneInstance commits circle staged instances of Circle to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCircle *BackRepoCircleStruct) CommitPhaseOneInstance(circle *models.Circle) (Error error) {

	// check if the circle is not commited yet
	if _, ok := (*backRepoCircle.Map_CirclePtr_CircleDBID)[circle]; ok {
		return
	}

	// initiate circle
	var circleDB CircleDB
	circleDB.Circle = *circle

	query := backRepoCircle.db.Create(&circleDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoCircle.Map_CirclePtr_CircleDBID)[circle] = circleDB.ID
	(*backRepoCircle.Map_CircleDBID_CirclePtr)[circleDB.ID] = circle
	(*backRepoCircle.Map_CircleDBID_CircleDB)[circleDB.ID] = &circleDB

	return
}

// BackRepoCircle.CommitPhaseTwo commits all staged instances of Circle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircle *BackRepoCircleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, circle := range *backRepoCircle.Map_CircleDBID_CirclePtr {
		backRepoCircle.CommitPhaseTwoInstance(backRepo, idx, circle)
	}

	return
}

// BackRepoCircle.CommitPhaseTwoInstance commits {{structname }} of models.Circle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircle *BackRepoCircleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, circle *models.Circle) (Error error) {

	// fetch matching circleDB
	if circleDB, ok := (*backRepoCircle.Map_CircleDBID_CircleDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				circleDB.Name_Data.String = circle.Name
				circleDB.Name_Data.Valid = true

				circleDB.CX_Data.Float64 = circle.CX
				circleDB.CX_Data.Valid = true

				circleDB.CY_Data.Float64 = circle.CY
				circleDB.CY_Data.Valid = true

				circleDB.Radius_Data.Float64 = circle.Radius
				circleDB.Radius_Data.Valid = true

				circleDB.Color_Data.String = circle.Color
				circleDB.Color_Data.Valid = true

				circleDB.FillOpacity_Data.Float64 = circle.FillOpacity
				circleDB.FillOpacity_Data.Valid = true

				circleDB.Stroke_Data.String = circle.Stroke
				circleDB.Stroke_Data.Valid = true

				circleDB.StrokeWidth_Data.Float64 = circle.StrokeWidth
				circleDB.StrokeWidth_Data.Valid = true

				circleDB.StrokeDashArray_Data.String = circle.StrokeDashArray
				circleDB.StrokeDashArray_Data.Valid = true

				circleDB.Transform_Data.String = circle.Transform
				circleDB.Transform_Data.Valid = true

			}
		}
		query := backRepoCircle.db.Save(&circleDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Circle intance %s", circle.Name))
		return err
	}

	return
}

// BackRepoCircle.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoCircle *BackRepoCircleStruct) CheckoutPhaseOne() (Error error) {

	circleDBArray := make([]CircleDB, 0)
	query := backRepoCircle.db.Find(&circleDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, circleDB := range circleDBArray {
		backRepoCircle.CheckoutPhaseOneInstance(&circleDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a circleDB that has been found in the DB, updates the backRepo and stages the
// models version of the circleDB
func (backRepoCircle *BackRepoCircleStruct) CheckoutPhaseOneInstance(circleDB *CircleDB) (Error error) {

	// if absent, create entries in the backRepoCircle maps.
	circleWithNewFieldValues := circleDB.Circle
	if _, ok := (*backRepoCircle.Map_CircleDBID_CirclePtr)[circleDB.ID]; !ok {

		(*backRepoCircle.Map_CircleDBID_CirclePtr)[circleDB.ID] = &circleWithNewFieldValues
		(*backRepoCircle.Map_CirclePtr_CircleDBID)[&circleWithNewFieldValues] = circleDB.ID

		// append model store with the new element
		circleWithNewFieldValues.Stage()
	}
	circleDBWithNewFieldValues := *circleDB
	(*backRepoCircle.Map_CircleDBID_CircleDB)[circleDB.ID] = &circleDBWithNewFieldValues

	return
}

// BackRepoCircle.CheckoutPhaseTwo Checkouts all staged instances of Circle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircle *BackRepoCircleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, circleDB := range *backRepoCircle.Map_CircleDBID_CircleDB {
		backRepoCircle.CheckoutPhaseTwoInstance(backRepo, circleDB)
	}
	return
}

// BackRepoCircle.CheckoutPhaseTwoInstance Checkouts staged instances of Circle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCircle *BackRepoCircleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, circleDB *CircleDB) (Error error) {

	circle := (*backRepoCircle.Map_CircleDBID_CirclePtr)[circleDB.ID]
	_ = circle // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			circle.Name = circleDB.Name_Data.String

			circle.CX = circleDB.CX_Data.Float64

			circle.CY = circleDB.CY_Data.Float64

			circle.Radius = circleDB.Radius_Data.Float64

			circle.Color = circleDB.Color_Data.String

			circle.FillOpacity = circleDB.FillOpacity_Data.Float64

			circle.Stroke = circleDB.Stroke_Data.String

			circle.StrokeWidth = circleDB.StrokeWidth_Data.Float64

			circle.StrokeDashArray = circleDB.StrokeDashArray_Data.String

			circle.Transform = circleDB.Transform_Data.String

		}
	}
	return
}

// CommitCircle allows commit of a single circle (if already staged)
func (backRepo *BackRepoStruct) CommitCircle(circle *models.Circle) {
	backRepo.BackRepoCircle.CommitPhaseOneInstance(circle)
	if id, ok := (*backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID)[circle]; ok {
		backRepo.BackRepoCircle.CommitPhaseTwoInstance(backRepo, id, circle)
	}
}

// CommitCircle allows checkout of a single circle (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCircle(circle *models.Circle) {
	// check if the circle is staged
	if _, ok := (*backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID)[circle]; ok {

		if id, ok := (*backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID)[circle]; ok {
			var circleDB CircleDB
			circleDB.ID = id

			if err := backRepo.BackRepoCircle.db.First(&circleDB, id).Error; err != nil {
				log.Panicln("CheckoutCircle : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCircle.CheckoutPhaseOneInstance(&circleDB)
			backRepo.BackRepoCircle.CheckoutPhaseTwoInstance(backRepo, &circleDB)
		}
	}
}
