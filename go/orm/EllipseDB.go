// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Ellipse sql.NullBool
var __Ellipse_time__dummyDeclaration time.Duration

// EllipseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model ellipseAPI
type EllipseAPI struct {
	models.Ellipse

	// insertion for fields declaration
	// Declation for basic field ellipseDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field ellipseDB.CX {{BasicKind}} (to be completed)
	CX_Data sql.NullFloat64

	// Declation for basic field ellipseDB.CY {{BasicKind}} (to be completed)
	CY_Data sql.NullFloat64

	// Declation for basic field ellipseDB.RX {{BasicKind}} (to be completed)
	RX_Data sql.NullFloat64

	// Declation for basic field ellipseDB.RY {{BasicKind}} (to be completed)
	RY_Data sql.NullFloat64

	// Declation for basic field ellipseDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field ellipseDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field ellipseDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field ellipseDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field ellipseDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// end of insertion
}

// EllipseDB describes a ellipse in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model ellipseDB
type EllipseDB struct {
	gorm.Model

	EllipseAPI
}

// EllipseDBs arrays ellipseDBs
// swagger:response ellipseDBsResponse
type EllipseDBs []EllipseDB

// EllipseDBResponse provides response
// swagger:response ellipseDBResponse
type EllipseDBResponse struct {
	EllipseDB
}

type BackRepoEllipseStruct struct {
	// stores EllipseDB according to their gorm ID
	Map_EllipseDBID_EllipseDB *map[uint]*EllipseDB

	// stores EllipseDB ID according to Ellipse address
	Map_EllipsePtr_EllipseDBID *map[*models.Ellipse]uint

	// stores Ellipse according to their gorm ID
	Map_EllipseDBID_EllipsePtr *map[uint]*models.Ellipse

	db *gorm.DB
}

// BackRepoEllipse.Init set up the BackRepo of the Ellipse
func (backRepoEllipse *BackRepoEllipseStruct) Init(db *gorm.DB) (Error error) {

	if backRepoEllipse.Map_EllipseDBID_EllipsePtr != nil {
		err := errors.New("In Init, backRepoEllipse.Map_EllipseDBID_EllipsePtr should be nil")
		return err
	}

	if backRepoEllipse.Map_EllipseDBID_EllipseDB != nil {
		err := errors.New("In Init, backRepoEllipse.Map_EllipseDBID_EllipseDB should be nil")
		return err
	}

	if backRepoEllipse.Map_EllipsePtr_EllipseDBID != nil {
		err := errors.New("In Init, backRepoEllipse.Map_EllipsePtr_EllipseDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Ellipse, 0)
	backRepoEllipse.Map_EllipseDBID_EllipsePtr = &tmp

	tmpDB := make(map[uint]*EllipseDB, 0)
	backRepoEllipse.Map_EllipseDBID_EllipseDB = &tmpDB

	tmpID := make(map[*models.Ellipse]uint, 0)
	backRepoEllipse.Map_EllipsePtr_EllipseDBID = &tmpID

	backRepoEllipse.db = db
	return
}

// BackRepoEllipse.CommitPhaseOne commits all staged instances of Ellipse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEllipse *BackRepoEllipseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for ellipse := range stage.Ellipses {
		backRepoEllipse.CommitPhaseOneInstance(ellipse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, ellipse := range *backRepoEllipse.Map_EllipseDBID_EllipsePtr {
		if _, ok := stage.Ellipses[ellipse]; !ok {
			backRepoEllipse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEllipse.CommitDeleteInstance commits deletion of Ellipse to the BackRepo
func (backRepoEllipse *BackRepoEllipseStruct) CommitDeleteInstance(id uint) (Error error) {

	ellipse := (*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[id]

	// ellipse is not staged anymore, remove ellipseDB
	ellipseDB := (*backRepoEllipse.Map_EllipseDBID_EllipseDB)[id]
	query := backRepoEllipse.db.Unscoped().Delete(&ellipseDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoEllipse.Map_EllipsePtr_EllipseDBID), ellipse)
	delete((*backRepoEllipse.Map_EllipseDBID_EllipsePtr), id)
	delete((*backRepoEllipse.Map_EllipseDBID_EllipseDB), id)

	return
}

// BackRepoEllipse.CommitPhaseOneInstance commits ellipse staged instances of Ellipse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEllipse *BackRepoEllipseStruct) CommitPhaseOneInstance(ellipse *models.Ellipse) (Error error) {

	// check if the ellipse is not commited yet
	if _, ok := (*backRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {
		return
	}

	// initiate ellipse
	var ellipseDB EllipseDB
	ellipseDB.Ellipse = *ellipse

	query := backRepoEllipse.db.Create(&ellipseDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse] = ellipseDB.ID
	(*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB.ID] = ellipse
	(*backRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB.ID] = &ellipseDB

	return
}

// BackRepoEllipse.CommitPhaseTwo commits all staged instances of Ellipse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEllipse *BackRepoEllipseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, ellipse := range *backRepoEllipse.Map_EllipseDBID_EllipsePtr {
		backRepoEllipse.CommitPhaseTwoInstance(backRepo, idx, ellipse)
	}

	return
}

// BackRepoEllipse.CommitPhaseTwoInstance commits {{structname }} of models.Ellipse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEllipse *BackRepoEllipseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, ellipse *models.Ellipse) (Error error) {

	// fetch matching ellipseDB
	if ellipseDB, ok := (*backRepoEllipse.Map_EllipseDBID_EllipseDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				ellipseDB.Name_Data.String = ellipse.Name
				ellipseDB.Name_Data.Valid = true

				ellipseDB.CX_Data.Float64 = ellipse.CX
				ellipseDB.CX_Data.Valid = true

				ellipseDB.CY_Data.Float64 = ellipse.CY
				ellipseDB.CY_Data.Valid = true

				ellipseDB.RX_Data.Float64 = ellipse.RX
				ellipseDB.RX_Data.Valid = true

				ellipseDB.RY_Data.Float64 = ellipse.RY
				ellipseDB.RY_Data.Valid = true

				ellipseDB.Color_Data.String = ellipse.Color
				ellipseDB.Color_Data.Valid = true

				ellipseDB.FillOpacity_Data.Float64 = ellipse.FillOpacity
				ellipseDB.FillOpacity_Data.Valid = true

				ellipseDB.Stroke_Data.String = ellipse.Stroke
				ellipseDB.Stroke_Data.Valid = true

				ellipseDB.StrokeWidth_Data.Float64 = ellipse.StrokeWidth
				ellipseDB.StrokeWidth_Data.Valid = true

				ellipseDB.StrokeDashArray_Data.String = ellipse.StrokeDashArray
				ellipseDB.StrokeDashArray_Data.Valid = true

			}
		}
		query := backRepoEllipse.db.Save(&ellipseDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Ellipse intance %s", ellipse.Name))
		return err
	}

	return
}

// BackRepoEllipse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoEllipse *BackRepoEllipseStruct) CheckoutPhaseOne() (Error error) {

	ellipseDBArray := make([]EllipseDB, 0)
	query := backRepoEllipse.db.Find(&ellipseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, ellipseDB := range ellipseDBArray {
		backRepoEllipse.CheckoutPhaseOneInstance(&ellipseDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a ellipseDB that has been found in the DB, updates the backRepo and stages the
// models version of the ellipseDB
func (backRepoEllipse *BackRepoEllipseStruct) CheckoutPhaseOneInstance(ellipseDB *EllipseDB) (Error error) {

	// if absent, create entries in the backRepoEllipse maps.
	ellipseWithNewFieldValues := ellipseDB.Ellipse
	if _, ok := (*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB.ID]; !ok {

		(*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB.ID] = &ellipseWithNewFieldValues
		(*backRepoEllipse.Map_EllipsePtr_EllipseDBID)[&ellipseWithNewFieldValues] = ellipseDB.ID

		// append model store with the new element
		ellipseWithNewFieldValues.Stage()
	}
	ellipseDBWithNewFieldValues := *ellipseDB
	(*backRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB.ID] = &ellipseDBWithNewFieldValues

	return
}

// BackRepoEllipse.CheckoutPhaseTwo Checkouts all staged instances of Ellipse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEllipse *BackRepoEllipseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, ellipseDB := range *backRepoEllipse.Map_EllipseDBID_EllipseDB {
		backRepoEllipse.CheckoutPhaseTwoInstance(backRepo, ellipseDB)
	}
	return
}

// BackRepoEllipse.CheckoutPhaseTwoInstance Checkouts staged instances of Ellipse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEllipse *BackRepoEllipseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, ellipseDB *EllipseDB) (Error error) {

	ellipse := (*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB.ID]
	_ = ellipse // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			ellipse.Name = ellipseDB.Name_Data.String

			ellipse.CX = ellipseDB.CX_Data.Float64

			ellipse.CY = ellipseDB.CY_Data.Float64

			ellipse.RX = ellipseDB.RX_Data.Float64

			ellipse.RY = ellipseDB.RY_Data.Float64

			ellipse.Color = ellipseDB.Color_Data.String

			ellipse.FillOpacity = ellipseDB.FillOpacity_Data.Float64

			ellipse.Stroke = ellipseDB.Stroke_Data.String

			ellipse.StrokeWidth = ellipseDB.StrokeWidth_Data.Float64

			ellipse.StrokeDashArray = ellipseDB.StrokeDashArray_Data.String

		}
	}
	return
}

// CommitEllipse allows commit of a single ellipse (if already staged)
func (backRepo *BackRepoStruct) CommitEllipse(ellipse *models.Ellipse) {
	backRepo.BackRepoEllipse.CommitPhaseOneInstance(ellipse)
	if id, ok := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {
		backRepo.BackRepoEllipse.CommitPhaseTwoInstance(backRepo, id, ellipse)
	}
}

// CommitEllipse allows checkout of a single ellipse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEllipse(ellipse *models.Ellipse) {
	// check if the ellipse is staged
	if _, ok := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {

		if id, ok := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {
			var ellipseDB EllipseDB
			ellipseDB.ID = id

			if err := backRepo.BackRepoEllipse.db.First(&ellipseDB, id).Error; err != nil {
				log.Panicln("CheckoutEllipse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEllipse.CheckoutPhaseOneInstance(&ellipseDB)
			backRepo.BackRepoEllipse.CheckoutPhaseTwoInstance(backRepo, &ellipseDB)
		}
	}
}
