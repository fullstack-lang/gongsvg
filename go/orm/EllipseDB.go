// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Ellipse sql.NullBool
var __Ellipse_time__dummyDeclaration time.Duration
var dummy_Ellipse_sort sort.Float64Slice

// EllipseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model ellipseAPI
type EllipseAPI struct {
	gorm.Model

	models.Ellipse

	// encoding of pointers
	EllipsePointersEnconding
}

// EllipsePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EllipsePointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// Implementation of a reverse ID for field SVG{}.Ellipses []*Ellipse
	SVG_EllipsesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	SVG_EllipsesDBID_Index sql.NullInt64
}

// EllipseDB describes a ellipse in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model ellipseDB
type EllipseDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field ellipseDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field ellipseDB.CX {{BasicKind}} (to be completed)
	CX_Data sql.NullFloat64

	// Declation for basic field ellipseDB.CY {{BasicKind}} (to be completed)
	CY_Data sql.NullFloat64

	// Declation for basic field ellipseDB.RX {{BasicKind}} (to be completed)
	RX_Data sql.NullFloat64

	// Declation for basic field ellipseDB.RY {{BasicKind}} (to be completed)
	RY_Data sql.NullFloat64

	// Declation for basic field ellipseDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field ellipseDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field ellipseDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field ellipseDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field ellipseDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// Declation for basic field ellipseDB.Transform {{BasicKind}} (to be completed)
	Transform_Data sql.NullString

	// encoding of pointers
	EllipsePointersEnconding
}

// EllipseDBs arrays ellipseDBs
// swagger:response ellipseDBsResponse
type EllipseDBs []EllipseDB

// EllipseDBResponse provides response
// swagger:response ellipseDBResponse
type EllipseDBResponse struct {
	EllipseDB
}

// EllipseWOP is a Ellipse without pointers
// it holds the same basic fields but pointers are encoded into uint
type EllipseWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string

	CX float64

	CY float64

	RX float64

	RY float64

	Color string

	FillOpacity float64

	Stroke string

	StrokeWidth float64

	StrokeDashArray string

	Transform string
	// insertion for WOP pointer fields
}

var Ellipse_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"CX",
	"CY",
	"RX",
	"RY",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"StrokeDashArray",
	"Transform",
}


type BackRepoEllipseStruct struct {
	// stores EllipseDB according to their gorm ID
	Map_EllipseDBID_EllipseDB *map[uint]*EllipseDB

	// stores EllipseDB ID according to Ellipse address
	Map_EllipsePtr_EllipseDBID *map[*models.Ellipse]uint

	// stores Ellipse according to their gorm ID
	Map_EllipseDBID_EllipsePtr *map[uint]*models.Ellipse

	db *gorm.DB
}

func (backRepoEllipse *BackRepoEllipseStruct) GetDB() *gorm.DB {
	return backRepoEllipse.db
}

// GetEllipseDBFromEllipsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoEllipse *BackRepoEllipseStruct) GetEllipseDBFromEllipsePtr(ellipse *models.Ellipse) (ellipseDB *EllipseDB) {
	id := (*backRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]
	ellipseDB = (*backRepoEllipse.Map_EllipseDBID_EllipseDB)[id]
	return
}

// BackRepoEllipse.Init set up the BackRepo of the Ellipse
func (backRepoEllipse *BackRepoEllipseStruct) Init(db *gorm.DB) (Error error) {

	if backRepoEllipse.Map_EllipseDBID_EllipsePtr != nil {
		err := errors.New("In Init, backRepoEllipse.Map_EllipseDBID_EllipsePtr should be nil")
		return err
	}

	if backRepoEllipse.Map_EllipseDBID_EllipseDB != nil {
		err := errors.New("In Init, backRepoEllipse.Map_EllipseDBID_EllipseDB should be nil")
		return err
	}

	if backRepoEllipse.Map_EllipsePtr_EllipseDBID != nil {
		err := errors.New("In Init, backRepoEllipse.Map_EllipsePtr_EllipseDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Ellipse, 0)
	backRepoEllipse.Map_EllipseDBID_EllipsePtr = &tmp

	tmpDB := make(map[uint]*EllipseDB, 0)
	backRepoEllipse.Map_EllipseDBID_EllipseDB = &tmpDB

	tmpID := make(map[*models.Ellipse]uint, 0)
	backRepoEllipse.Map_EllipsePtr_EllipseDBID = &tmpID

	backRepoEllipse.db = db
	return
}

// BackRepoEllipse.CommitPhaseOne commits all staged instances of Ellipse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEllipse *BackRepoEllipseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for ellipse := range stage.Ellipses {
		backRepoEllipse.CommitPhaseOneInstance(ellipse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, ellipse := range *backRepoEllipse.Map_EllipseDBID_EllipsePtr {
		if _, ok := stage.Ellipses[ellipse]; !ok {
			backRepoEllipse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEllipse.CommitDeleteInstance commits deletion of Ellipse to the BackRepo
func (backRepoEllipse *BackRepoEllipseStruct) CommitDeleteInstance(id uint) (Error error) {

	ellipse := (*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[id]

	// ellipse is not staged anymore, remove ellipseDB
	ellipseDB := (*backRepoEllipse.Map_EllipseDBID_EllipseDB)[id]
	query := backRepoEllipse.db.Unscoped().Delete(&ellipseDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoEllipse.Map_EllipsePtr_EllipseDBID), ellipse)
	delete((*backRepoEllipse.Map_EllipseDBID_EllipsePtr), id)
	delete((*backRepoEllipse.Map_EllipseDBID_EllipseDB), id)

	return
}

// BackRepoEllipse.CommitPhaseOneInstance commits ellipse staged instances of Ellipse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEllipse *BackRepoEllipseStruct) CommitPhaseOneInstance(ellipse *models.Ellipse) (Error error) {

	// check if the ellipse is not commited yet
	if _, ok := (*backRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {
		return
	}

	// initiate ellipse
	var ellipseDB EllipseDB
	ellipseDB.CopyBasicFieldsFromEllipse(ellipse)

	query := backRepoEllipse.db.Create(&ellipseDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse] = ellipseDB.ID
	(*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB.ID] = ellipse
	(*backRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB.ID] = &ellipseDB

	return
}

// BackRepoEllipse.CommitPhaseTwo commits all staged instances of Ellipse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEllipse *BackRepoEllipseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, ellipse := range *backRepoEllipse.Map_EllipseDBID_EllipsePtr {
		backRepoEllipse.CommitPhaseTwoInstance(backRepo, idx, ellipse)
	}

	return
}

// BackRepoEllipse.CommitPhaseTwoInstance commits {{structname }} of models.Ellipse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEllipse *BackRepoEllipseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, ellipse *models.Ellipse) (Error error) {

	// fetch matching ellipseDB
	if ellipseDB, ok := (*backRepoEllipse.Map_EllipseDBID_EllipseDB)[idx]; ok {

		ellipseDB.CopyBasicFieldsFromEllipse(ellipse)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEllipse.db.Save(&ellipseDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Ellipse intance %s", ellipse.Name))
		return err
	}

	return
}

// BackRepoEllipse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoEllipse *BackRepoEllipseStruct) CheckoutPhaseOne() (Error error) {

	ellipseDBArray := make([]EllipseDB, 0)
	query := backRepoEllipse.db.Find(&ellipseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, ellipseDB := range ellipseDBArray {
		backRepoEllipse.CheckoutPhaseOneInstance(&ellipseDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a ellipseDB that has been found in the DB, updates the backRepo and stages the
// models version of the ellipseDB
func (backRepoEllipse *BackRepoEllipseStruct) CheckoutPhaseOneInstance(ellipseDB *EllipseDB) (Error error) {

	ellipse, ok := (*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB.ID]
	if !ok {
		ellipse = new(models.Ellipse)

		(*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB.ID] = ellipse
		(*backRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse] = ellipseDB.ID

		// append model store with the new element
		ellipse.Name = ellipseDB.Name_Data.String
		ellipse.Stage()
	}
	ellipseDB.CopyBasicFieldsToEllipse(ellipse)

	// preserve pointer to ellipseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EllipseDBID_EllipseDB)[ellipseDB hold variable pointers
	ellipseDB_Data := *ellipseDB
	preservedPtrToEllipse := &ellipseDB_Data
	(*backRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB.ID] = preservedPtrToEllipse

	return
}

// BackRepoEllipse.CheckoutPhaseTwo Checkouts all staged instances of Ellipse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEllipse *BackRepoEllipseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, ellipseDB := range *backRepoEllipse.Map_EllipseDBID_EllipseDB {
		backRepoEllipse.CheckoutPhaseTwoInstance(backRepo, ellipseDB)
	}
	return
}

// BackRepoEllipse.CheckoutPhaseTwoInstance Checkouts staged instances of Ellipse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEllipse *BackRepoEllipseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, ellipseDB *EllipseDB) (Error error) {

	ellipse := (*backRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB.ID]
	_ = ellipse // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitEllipse allows commit of a single ellipse (if already staged)
func (backRepo *BackRepoStruct) CommitEllipse(ellipse *models.Ellipse) {
	backRepo.BackRepoEllipse.CommitPhaseOneInstance(ellipse)
	if id, ok := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {
		backRepo.BackRepoEllipse.CommitPhaseTwoInstance(backRepo, id, ellipse)
	}
}

// CommitEllipse allows checkout of a single ellipse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEllipse(ellipse *models.Ellipse) {
	// check if the ellipse is staged
	if _, ok := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {

		if id, ok := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {
			var ellipseDB EllipseDB
			ellipseDB.ID = id

			if err := backRepo.BackRepoEllipse.db.First(&ellipseDB, id).Error; err != nil {
				log.Panicln("CheckoutEllipse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEllipse.CheckoutPhaseOneInstance(&ellipseDB)
			backRepo.BackRepoEllipse.CheckoutPhaseTwoInstance(backRepo, &ellipseDB)
		}
	}
}

// CopyBasicFieldsFromEllipse
func (ellipseDB *EllipseDB) CopyBasicFieldsFromEllipse(ellipse *models.Ellipse) {
	// insertion point for fields commit
	ellipseDB.Name_Data.String = ellipse.Name
	ellipseDB.Name_Data.Valid = true

	ellipseDB.CX_Data.Float64 = ellipse.CX
	ellipseDB.CX_Data.Valid = true

	ellipseDB.CY_Data.Float64 = ellipse.CY
	ellipseDB.CY_Data.Valid = true

	ellipseDB.RX_Data.Float64 = ellipse.RX
	ellipseDB.RX_Data.Valid = true

	ellipseDB.RY_Data.Float64 = ellipse.RY
	ellipseDB.RY_Data.Valid = true

	ellipseDB.Color_Data.String = ellipse.Color
	ellipseDB.Color_Data.Valid = true

	ellipseDB.FillOpacity_Data.Float64 = ellipse.FillOpacity
	ellipseDB.FillOpacity_Data.Valid = true

	ellipseDB.Stroke_Data.String = ellipse.Stroke
	ellipseDB.Stroke_Data.Valid = true

	ellipseDB.StrokeWidth_Data.Float64 = ellipse.StrokeWidth
	ellipseDB.StrokeWidth_Data.Valid = true

	ellipseDB.StrokeDashArray_Data.String = ellipse.StrokeDashArray
	ellipseDB.StrokeDashArray_Data.Valid = true

	ellipseDB.Transform_Data.String = ellipse.Transform
	ellipseDB.Transform_Data.Valid = true

}

// CopyBasicFieldsFromEllipseWOP
func (ellipseDB *EllipseDB) CopyBasicFieldsFromEllipseWOP(ellipse *EllipseWOP) {
	// insertion point for fields commit
	ellipseDB.Name_Data.String = ellipse.Name
	ellipseDB.Name_Data.Valid = true

	ellipseDB.CX_Data.Float64 = ellipse.CX
	ellipseDB.CX_Data.Valid = true

	ellipseDB.CY_Data.Float64 = ellipse.CY
	ellipseDB.CY_Data.Valid = true

	ellipseDB.RX_Data.Float64 = ellipse.RX
	ellipseDB.RX_Data.Valid = true

	ellipseDB.RY_Data.Float64 = ellipse.RY
	ellipseDB.RY_Data.Valid = true

	ellipseDB.Color_Data.String = ellipse.Color
	ellipseDB.Color_Data.Valid = true

	ellipseDB.FillOpacity_Data.Float64 = ellipse.FillOpacity
	ellipseDB.FillOpacity_Data.Valid = true

	ellipseDB.Stroke_Data.String = ellipse.Stroke
	ellipseDB.Stroke_Data.Valid = true

	ellipseDB.StrokeWidth_Data.Float64 = ellipse.StrokeWidth
	ellipseDB.StrokeWidth_Data.Valid = true

	ellipseDB.StrokeDashArray_Data.String = ellipse.StrokeDashArray
	ellipseDB.StrokeDashArray_Data.Valid = true

	ellipseDB.Transform_Data.String = ellipse.Transform
	ellipseDB.Transform_Data.Valid = true

}

// CopyBasicFieldsToEllipse
func (ellipseDB *EllipseDB) CopyBasicFieldsToEllipse(ellipse *models.Ellipse) {
	// insertion point for checkout of basic fields (back repo to stage)
	ellipse.Name = ellipseDB.Name_Data.String
	ellipse.CX = ellipseDB.CX_Data.Float64
	ellipse.CY = ellipseDB.CY_Data.Float64
	ellipse.RX = ellipseDB.RX_Data.Float64
	ellipse.RY = ellipseDB.RY_Data.Float64
	ellipse.Color = ellipseDB.Color_Data.String
	ellipse.FillOpacity = ellipseDB.FillOpacity_Data.Float64
	ellipse.Stroke = ellipseDB.Stroke_Data.String
	ellipse.StrokeWidth = ellipseDB.StrokeWidth_Data.Float64
	ellipse.StrokeDashArray = ellipseDB.StrokeDashArray_Data.String
	ellipse.Transform = ellipseDB.Transform_Data.String
}

// CopyBasicFieldsToEllipseWOP
func (ellipseDB *EllipseDB) CopyBasicFieldsToEllipseWOP(ellipse *EllipseWOP) {
	ellipse.ID = int(ellipseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	ellipse.Name = ellipseDB.Name_Data.String
	ellipse.CX = ellipseDB.CX_Data.Float64
	ellipse.CY = ellipseDB.CY_Data.Float64
	ellipse.RX = ellipseDB.RX_Data.Float64
	ellipse.RY = ellipseDB.RY_Data.Float64
	ellipse.Color = ellipseDB.Color_Data.String
	ellipse.FillOpacity = ellipseDB.FillOpacity_Data.Float64
	ellipse.Stroke = ellipseDB.Stroke_Data.String
	ellipse.StrokeWidth = ellipseDB.StrokeWidth_Data.Float64
	ellipse.StrokeDashArray = ellipseDB.StrokeDashArray_Data.String
	ellipse.Transform = ellipseDB.Transform_Data.String
}

// Backup generates a json file from a slice of all EllipseDB instances in the backrepo
func (backRepoEllipse *BackRepoEllipseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EllipseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EllipseDB, 0)
	for _, ellipseDB := range *backRepoEllipse.Map_EllipseDBID_EllipseDB {
		forBackup = append(forBackup, ellipseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Ellipse ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Ellipse file", err.Error())
	}
}

// Backup generates a json file from a slice of all EllipseDB instances in the backrepo
func (backRepoEllipse *BackRepoEllipseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EllipseDB, 0)
	for _, ellipseDB := range *backRepoEllipse.Map_EllipseDBID_EllipseDB {
		forBackup = append(forBackup, ellipseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Ellipse")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Ellipse_Fields, -1)
	for _, ellipseDB := range forBackup {

		var ellipseWOP EllipseWOP
		ellipseDB.CopyBasicFieldsToEllipseWOP(&ellipseWOP)

		row := sh.AddRow()
		row.WriteStruct(&ellipseWOP, -1)
	}
}

// RestorePhaseOne read the file "EllipseDB.json" in dirPath that stores an array
// of EllipseDB and stores it in the database
// the map BackRepoEllipseid_atBckpTime_newID is updated accordingly
func (backRepoEllipse *BackRepoEllipseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEllipseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EllipseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Ellipse file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EllipseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EllipseDBID_EllipseDB
	for _, ellipseDB := range forRestore {

		ellipseDB_ID_atBackupTime := ellipseDB.ID
		ellipseDB.ID = 0
		query := backRepoEllipse.db.Create(ellipseDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB.ID] = ellipseDB
		BackRepoEllipseid_atBckpTime_newID[ellipseDB_ID_atBackupTime] = ellipseDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Ellipse file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Ellipse>id_atBckpTime_newID
// to compute new index
func (backRepoEllipse *BackRepoEllipseStruct) RestorePhaseTwo() {

	for _, ellipseDB := range (*backRepoEllipse.Map_EllipseDBID_EllipseDB) {

		// next line of code is to avert unused variable compilation error
		_ = ellipseDB

		// insertion point for reindexing pointers encoding
		// This reindex ellipse.Ellipses
		if ellipseDB.SVG_EllipsesDBID.Int64 != 0 {
			ellipseDB.SVG_EllipsesDBID.Int64 = 
				int64(BackRepoSVGid_atBckpTime_newID[uint(ellipseDB.SVG_EllipsesDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoEllipse.db.Model(ellipseDB).Updates(*ellipseDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEllipseid_atBckpTime_newID map[uint]uint
