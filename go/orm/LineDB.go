// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Line sql.NullBool
var __Line_time__dummyDeclaration time.Duration
var dummy_Line_sort sort.Float64Slice

// LineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model lineAPI
type LineAPI struct {
	gorm.Model

	models.Line

	// encoding of pointers
	LinePointersEnconding
}

// LinePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LinePointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// Implementation of a reverse ID for field SVG{}.Lines []*Line
	SVG_LinesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	SVG_LinesDBID_Index sql.NullInt64
}

// LineDB describes a line in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model lineDB
type LineDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field lineDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field lineDB.X1 {{BasicKind}} (to be completed)
	X1_Data sql.NullFloat64

	// Declation for basic field lineDB.Y1 {{BasicKind}} (to be completed)
	Y1_Data sql.NullFloat64

	// Declation for basic field lineDB.X2 {{BasicKind}} (to be completed)
	X2_Data sql.NullFloat64

	// Declation for basic field lineDB.Y2 {{BasicKind}} (to be completed)
	Y2_Data sql.NullFloat64

	// Declation for basic field lineDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field lineDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field lineDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field lineDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field lineDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// Declation for basic field lineDB.Transform {{BasicKind}} (to be completed)
	Transform_Data sql.NullString

	// encoding of pointers
	LinePointersEnconding
}

// LineDBs arrays lineDBs
// swagger:response lineDBsResponse
type LineDBs []LineDB

// LineDBResponse provides response
// swagger:response lineDBResponse
type LineDBResponse struct {
	LineDB
}

// LineWOP is a Line without pointers
// it holds the same basic fields but pointers are encoded into uint
type LineWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string

	X1 float64

	Y1 float64

	X2 float64

	Y2 float64

	Color string

	FillOpacity float64

	Stroke string

	StrokeWidth float64

	StrokeDashArray string

	Transform string
	// insertion for WOP pointer fields
}

var Line_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"X1",
	"Y1",
	"X2",
	"Y2",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"StrokeDashArray",
	"Transform",
}


type BackRepoLineStruct struct {
	// stores LineDB according to their gorm ID
	Map_LineDBID_LineDB *map[uint]*LineDB

	// stores LineDB ID according to Line address
	Map_LinePtr_LineDBID *map[*models.Line]uint

	// stores Line according to their gorm ID
	Map_LineDBID_LinePtr *map[uint]*models.Line

	db *gorm.DB
}

func (backRepoLine *BackRepoLineStruct) GetDB() *gorm.DB {
	return backRepoLine.db
}

// GetLineDBFromLinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoLine *BackRepoLineStruct) GetLineDBFromLinePtr(line *models.Line) (lineDB *LineDB) {
	id := (*backRepoLine.Map_LinePtr_LineDBID)[line]
	lineDB = (*backRepoLine.Map_LineDBID_LineDB)[id]
	return
}

// BackRepoLine.Init set up the BackRepo of the Line
func (backRepoLine *BackRepoLineStruct) Init(db *gorm.DB) (Error error) {

	if backRepoLine.Map_LineDBID_LinePtr != nil {
		err := errors.New("In Init, backRepoLine.Map_LineDBID_LinePtr should be nil")
		return err
	}

	if backRepoLine.Map_LineDBID_LineDB != nil {
		err := errors.New("In Init, backRepoLine.Map_LineDBID_LineDB should be nil")
		return err
	}

	if backRepoLine.Map_LinePtr_LineDBID != nil {
		err := errors.New("In Init, backRepoLine.Map_LinePtr_LineDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Line, 0)
	backRepoLine.Map_LineDBID_LinePtr = &tmp

	tmpDB := make(map[uint]*LineDB, 0)
	backRepoLine.Map_LineDBID_LineDB = &tmpDB

	tmpID := make(map[*models.Line]uint, 0)
	backRepoLine.Map_LinePtr_LineDBID = &tmpID

	backRepoLine.db = db
	return
}

// BackRepoLine.CommitPhaseOne commits all staged instances of Line to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLine *BackRepoLineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for line := range stage.Lines {
		backRepoLine.CommitPhaseOneInstance(line)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, line := range *backRepoLine.Map_LineDBID_LinePtr {
		if _, ok := stage.Lines[line]; !ok {
			backRepoLine.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLine.CommitDeleteInstance commits deletion of Line to the BackRepo
func (backRepoLine *BackRepoLineStruct) CommitDeleteInstance(id uint) (Error error) {

	line := (*backRepoLine.Map_LineDBID_LinePtr)[id]

	// line is not staged anymore, remove lineDB
	lineDB := (*backRepoLine.Map_LineDBID_LineDB)[id]
	query := backRepoLine.db.Unscoped().Delete(&lineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoLine.Map_LinePtr_LineDBID), line)
	delete((*backRepoLine.Map_LineDBID_LinePtr), id)
	delete((*backRepoLine.Map_LineDBID_LineDB), id)

	return
}

// BackRepoLine.CommitPhaseOneInstance commits line staged instances of Line to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLine *BackRepoLineStruct) CommitPhaseOneInstance(line *models.Line) (Error error) {

	// check if the line is not commited yet
	if _, ok := (*backRepoLine.Map_LinePtr_LineDBID)[line]; ok {
		return
	}

	// initiate line
	var lineDB LineDB
	lineDB.CopyBasicFieldsFromLine(line)

	query := backRepoLine.db.Create(&lineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoLine.Map_LinePtr_LineDBID)[line] = lineDB.ID
	(*backRepoLine.Map_LineDBID_LinePtr)[lineDB.ID] = line
	(*backRepoLine.Map_LineDBID_LineDB)[lineDB.ID] = &lineDB

	return
}

// BackRepoLine.CommitPhaseTwo commits all staged instances of Line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine *BackRepoLineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, line := range *backRepoLine.Map_LineDBID_LinePtr {
		backRepoLine.CommitPhaseTwoInstance(backRepo, idx, line)
	}

	return
}

// BackRepoLine.CommitPhaseTwoInstance commits {{structname }} of models.Line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine *BackRepoLineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, line *models.Line) (Error error) {

	// fetch matching lineDB
	if lineDB, ok := (*backRepoLine.Map_LineDBID_LineDB)[idx]; ok {

		lineDB.CopyBasicFieldsFromLine(line)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoLine.db.Save(&lineDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Line intance %s", line.Name))
		return err
	}

	return
}

// BackRepoLine.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoLine *BackRepoLineStruct) CheckoutPhaseOne() (Error error) {

	lineDBArray := make([]LineDB, 0)
	query := backRepoLine.db.Find(&lineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, lineDB := range lineDBArray {
		backRepoLine.CheckoutPhaseOneInstance(&lineDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a lineDB that has been found in the DB, updates the backRepo and stages the
// models version of the lineDB
func (backRepoLine *BackRepoLineStruct) CheckoutPhaseOneInstance(lineDB *LineDB) (Error error) {

	line, ok := (*backRepoLine.Map_LineDBID_LinePtr)[lineDB.ID]
	if !ok {
		line = new(models.Line)

		(*backRepoLine.Map_LineDBID_LinePtr)[lineDB.ID] = line
		(*backRepoLine.Map_LinePtr_LineDBID)[line] = lineDB.ID

		// append model store with the new element
		line.Name = lineDB.Name_Data.String
		line.Stage()
	}
	lineDB.CopyBasicFieldsToLine(line)

	// preserve pointer to lineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LineDBID_LineDB)[lineDB hold variable pointers
	lineDB_Data := *lineDB
	preservedPtrToLine := &lineDB_Data
	(*backRepoLine.Map_LineDBID_LineDB)[lineDB.ID] = preservedPtrToLine

	return
}

// BackRepoLine.CheckoutPhaseTwo Checkouts all staged instances of Line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine *BackRepoLineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, lineDB := range *backRepoLine.Map_LineDBID_LineDB {
		backRepoLine.CheckoutPhaseTwoInstance(backRepo, lineDB)
	}
	return
}

// BackRepoLine.CheckoutPhaseTwoInstance Checkouts staged instances of Line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine *BackRepoLineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, lineDB *LineDB) (Error error) {

	line := (*backRepoLine.Map_LineDBID_LinePtr)[lineDB.ID]
	_ = line // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitLine allows commit of a single line (if already staged)
func (backRepo *BackRepoStruct) CommitLine(line *models.Line) {
	backRepo.BackRepoLine.CommitPhaseOneInstance(line)
	if id, ok := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[line]; ok {
		backRepo.BackRepoLine.CommitPhaseTwoInstance(backRepo, id, line)
	}
}

// CommitLine allows checkout of a single line (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLine(line *models.Line) {
	// check if the line is staged
	if _, ok := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[line]; ok {

		if id, ok := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[line]; ok {
			var lineDB LineDB
			lineDB.ID = id

			if err := backRepo.BackRepoLine.db.First(&lineDB, id).Error; err != nil {
				log.Panicln("CheckoutLine : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLine.CheckoutPhaseOneInstance(&lineDB)
			backRepo.BackRepoLine.CheckoutPhaseTwoInstance(backRepo, &lineDB)
		}
	}
}

// CopyBasicFieldsFromLine
func (lineDB *LineDB) CopyBasicFieldsFromLine(line *models.Line) {
	// insertion point for fields commit
	lineDB.Name_Data.String = line.Name
	lineDB.Name_Data.Valid = true

	lineDB.X1_Data.Float64 = line.X1
	lineDB.X1_Data.Valid = true

	lineDB.Y1_Data.Float64 = line.Y1
	lineDB.Y1_Data.Valid = true

	lineDB.X2_Data.Float64 = line.X2
	lineDB.X2_Data.Valid = true

	lineDB.Y2_Data.Float64 = line.Y2
	lineDB.Y2_Data.Valid = true

	lineDB.Color_Data.String = line.Color
	lineDB.Color_Data.Valid = true

	lineDB.FillOpacity_Data.Float64 = line.FillOpacity
	lineDB.FillOpacity_Data.Valid = true

	lineDB.Stroke_Data.String = line.Stroke
	lineDB.Stroke_Data.Valid = true

	lineDB.StrokeWidth_Data.Float64 = line.StrokeWidth
	lineDB.StrokeWidth_Data.Valid = true

	lineDB.StrokeDashArray_Data.String = line.StrokeDashArray
	lineDB.StrokeDashArray_Data.Valid = true

	lineDB.Transform_Data.String = line.Transform
	lineDB.Transform_Data.Valid = true

}

// CopyBasicFieldsFromLineWOP
func (lineDB *LineDB) CopyBasicFieldsFromLineWOP(line *LineWOP) {
	// insertion point for fields commit
	lineDB.Name_Data.String = line.Name
	lineDB.Name_Data.Valid = true

	lineDB.X1_Data.Float64 = line.X1
	lineDB.X1_Data.Valid = true

	lineDB.Y1_Data.Float64 = line.Y1
	lineDB.Y1_Data.Valid = true

	lineDB.X2_Data.Float64 = line.X2
	lineDB.X2_Data.Valid = true

	lineDB.Y2_Data.Float64 = line.Y2
	lineDB.Y2_Data.Valid = true

	lineDB.Color_Data.String = line.Color
	lineDB.Color_Data.Valid = true

	lineDB.FillOpacity_Data.Float64 = line.FillOpacity
	lineDB.FillOpacity_Data.Valid = true

	lineDB.Stroke_Data.String = line.Stroke
	lineDB.Stroke_Data.Valid = true

	lineDB.StrokeWidth_Data.Float64 = line.StrokeWidth
	lineDB.StrokeWidth_Data.Valid = true

	lineDB.StrokeDashArray_Data.String = line.StrokeDashArray
	lineDB.StrokeDashArray_Data.Valid = true

	lineDB.Transform_Data.String = line.Transform
	lineDB.Transform_Data.Valid = true

}

// CopyBasicFieldsToLine
func (lineDB *LineDB) CopyBasicFieldsToLine(line *models.Line) {
	// insertion point for checkout of basic fields (back repo to stage)
	line.Name = lineDB.Name_Data.String
	line.X1 = lineDB.X1_Data.Float64
	line.Y1 = lineDB.Y1_Data.Float64
	line.X2 = lineDB.X2_Data.Float64
	line.Y2 = lineDB.Y2_Data.Float64
	line.Color = lineDB.Color_Data.String
	line.FillOpacity = lineDB.FillOpacity_Data.Float64
	line.Stroke = lineDB.Stroke_Data.String
	line.StrokeWidth = lineDB.StrokeWidth_Data.Float64
	line.StrokeDashArray = lineDB.StrokeDashArray_Data.String
	line.Transform = lineDB.Transform_Data.String
}

// CopyBasicFieldsToLineWOP
func (lineDB *LineDB) CopyBasicFieldsToLineWOP(line *LineWOP) {
	line.ID = int(lineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	line.Name = lineDB.Name_Data.String
	line.X1 = lineDB.X1_Data.Float64
	line.Y1 = lineDB.Y1_Data.Float64
	line.X2 = lineDB.X2_Data.Float64
	line.Y2 = lineDB.Y2_Data.Float64
	line.Color = lineDB.Color_Data.String
	line.FillOpacity = lineDB.FillOpacity_Data.Float64
	line.Stroke = lineDB.Stroke_Data.String
	line.StrokeWidth = lineDB.StrokeWidth_Data.Float64
	line.StrokeDashArray = lineDB.StrokeDashArray_Data.String
	line.Transform = lineDB.Transform_Data.String
}

// Backup generates a json file from a slice of all LineDB instances in the backrepo
func (backRepoLine *BackRepoLineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LineDB, 0)
	for _, lineDB := range *backRepoLine.Map_LineDBID_LineDB {
		forBackup = append(forBackup, lineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Line ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Line file", err.Error())
	}
}

// Backup generates a json file from a slice of all LineDB instances in the backrepo
func (backRepoLine *BackRepoLineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LineDB, 0)
	for _, lineDB := range *backRepoLine.Map_LineDBID_LineDB {
		forBackup = append(forBackup, lineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Line")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Line_Fields, -1)
	for _, lineDB := range forBackup {

		var lineWOP LineWOP
		lineDB.CopyBasicFieldsToLineWOP(&lineWOP)

		row := sh.AddRow()
		row.WriteStruct(&lineWOP, -1)
	}
}

// RestorePhaseOne read the file "LineDB.json" in dirPath that stores an array
// of LineDB and stores it in the database
// the map BackRepoLineid_atBckpTime_newID is updated accordingly
func (backRepoLine *BackRepoLineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Line file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LineDBID_LineDB
	for _, lineDB := range forRestore {

		lineDB_ID_atBackupTime := lineDB.ID
		lineDB.ID = 0
		query := backRepoLine.db.Create(lineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoLine.Map_LineDBID_LineDB)[lineDB.ID] = lineDB
		BackRepoLineid_atBckpTime_newID[lineDB_ID_atBackupTime] = lineDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Line file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Line>id_atBckpTime_newID
// to compute new index
func (backRepoLine *BackRepoLineStruct) RestorePhaseTwo() {

	for _, lineDB := range (*backRepoLine.Map_LineDBID_LineDB) {

		// next line of code is to avert unused variable compilation error
		_ = lineDB

		// insertion point for reindexing pointers encoding
		// This reindex line.Lines
		if lineDB.SVG_LinesDBID.Int64 != 0 {
			lineDB.SVG_LinesDBID.Int64 = 
				int64(BackRepoSVGid_atBckpTime_newID[uint(lineDB.SVG_LinesDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoLine.db.Model(lineDB).Updates(*lineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLineid_atBckpTime_newID map[uint]uint
