// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Line sql.NullBool
var __Line_time__dummyDeclaration time.Duration

// LineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model lineAPI
type LineAPI struct {
	models.Line

	// insertion for fields declaration
	// Declation for basic field lineDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field lineDB.X1 {{BasicKind}} (to be completed)
	X1_Data sql.NullFloat64

	// Declation for basic field lineDB.Y1 {{BasicKind}} (to be completed)
	Y1_Data sql.NullFloat64

	// Declation for basic field lineDB.X2 {{BasicKind}} (to be completed)
	X2_Data sql.NullFloat64

	// Declation for basic field lineDB.Y2 {{BasicKind}} (to be completed)
	Y2_Data sql.NullFloat64

	// Declation for basic field lineDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field lineDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field lineDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field lineDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field lineDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// Declation for basic field lineDB.Transform {{BasicKind}} (to be completed)
	Transform_Data sql.NullString

	// Implementation of a reverse ID for field SVG{}.Lines []*Line
	SVG_LinesDBID sql.NullInt64

	// end of insertion
}

// LineDB describes a line in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model lineDB
type LineDB struct {
	gorm.Model

	LineAPI
}

// LineDBs arrays lineDBs
// swagger:response lineDBsResponse
type LineDBs []LineDB

// LineDBResponse provides response
// swagger:response lineDBResponse
type LineDBResponse struct {
	LineDB
}

type BackRepoLineStruct struct {
	// stores LineDB according to their gorm ID
	Map_LineDBID_LineDB *map[uint]*LineDB

	// stores LineDB ID according to Line address
	Map_LinePtr_LineDBID *map[*models.Line]uint

	// stores Line according to their gorm ID
	Map_LineDBID_LinePtr *map[uint]*models.Line

	db *gorm.DB
}

// BackRepoLine.Init set up the BackRepo of the Line
func (backRepoLine *BackRepoLineStruct) Init(db *gorm.DB) (Error error) {

	if backRepoLine.Map_LineDBID_LinePtr != nil {
		err := errors.New("In Init, backRepoLine.Map_LineDBID_LinePtr should be nil")
		return err
	}

	if backRepoLine.Map_LineDBID_LineDB != nil {
		err := errors.New("In Init, backRepoLine.Map_LineDBID_LineDB should be nil")
		return err
	}

	if backRepoLine.Map_LinePtr_LineDBID != nil {
		err := errors.New("In Init, backRepoLine.Map_LinePtr_LineDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Line, 0)
	backRepoLine.Map_LineDBID_LinePtr = &tmp

	tmpDB := make(map[uint]*LineDB, 0)
	backRepoLine.Map_LineDBID_LineDB = &tmpDB

	tmpID := make(map[*models.Line]uint, 0)
	backRepoLine.Map_LinePtr_LineDBID = &tmpID

	backRepoLine.db = db
	return
}

// BackRepoLine.CommitPhaseOne commits all staged instances of Line to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLine *BackRepoLineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for line := range stage.Lines {
		backRepoLine.CommitPhaseOneInstance(line)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, line := range *backRepoLine.Map_LineDBID_LinePtr {
		if _, ok := stage.Lines[line]; !ok {
			backRepoLine.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLine.CommitDeleteInstance commits deletion of Line to the BackRepo
func (backRepoLine *BackRepoLineStruct) CommitDeleteInstance(id uint) (Error error) {

	line := (*backRepoLine.Map_LineDBID_LinePtr)[id]

	// line is not staged anymore, remove lineDB
	lineDB := (*backRepoLine.Map_LineDBID_LineDB)[id]
	query := backRepoLine.db.Unscoped().Delete(&lineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoLine.Map_LinePtr_LineDBID), line)
	delete((*backRepoLine.Map_LineDBID_LinePtr), id)
	delete((*backRepoLine.Map_LineDBID_LineDB), id)

	return
}

// BackRepoLine.CommitPhaseOneInstance commits line staged instances of Line to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLine *BackRepoLineStruct) CommitPhaseOneInstance(line *models.Line) (Error error) {

	// check if the line is not commited yet
	if _, ok := (*backRepoLine.Map_LinePtr_LineDBID)[line]; ok {
		return
	}

	// initiate line
	var lineDB LineDB
	lineDB.Line = *line

	query := backRepoLine.db.Create(&lineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoLine.Map_LinePtr_LineDBID)[line] = lineDB.ID
	(*backRepoLine.Map_LineDBID_LinePtr)[lineDB.ID] = line
	(*backRepoLine.Map_LineDBID_LineDB)[lineDB.ID] = &lineDB

	return
}

// BackRepoLine.CommitPhaseTwo commits all staged instances of Line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine *BackRepoLineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, line := range *backRepoLine.Map_LineDBID_LinePtr {
		backRepoLine.CommitPhaseTwoInstance(backRepo, idx, line)
	}

	return
}

// BackRepoLine.CommitPhaseTwoInstance commits {{structname }} of models.Line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine *BackRepoLineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, line *models.Line) (Error error) {

	// fetch matching lineDB
	if lineDB, ok := (*backRepoLine.Map_LineDBID_LineDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				lineDB.Name_Data.String = line.Name
				lineDB.Name_Data.Valid = true

				lineDB.X1_Data.Float64 = line.X1
				lineDB.X1_Data.Valid = true

				lineDB.Y1_Data.Float64 = line.Y1
				lineDB.Y1_Data.Valid = true

				lineDB.X2_Data.Float64 = line.X2
				lineDB.X2_Data.Valid = true

				lineDB.Y2_Data.Float64 = line.Y2
				lineDB.Y2_Data.Valid = true

				lineDB.Color_Data.String = line.Color
				lineDB.Color_Data.Valid = true

				lineDB.FillOpacity_Data.Float64 = line.FillOpacity
				lineDB.FillOpacity_Data.Valid = true

				lineDB.Stroke_Data.String = line.Stroke
				lineDB.Stroke_Data.Valid = true

				lineDB.StrokeWidth_Data.Float64 = line.StrokeWidth
				lineDB.StrokeWidth_Data.Valid = true

				lineDB.StrokeDashArray_Data.String = line.StrokeDashArray
				lineDB.StrokeDashArray_Data.Valid = true

				lineDB.Transform_Data.String = line.Transform
				lineDB.Transform_Data.Valid = true

			}
		}
		query := backRepoLine.db.Save(&lineDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Line intance %s", line.Name))
		return err
	}

	return
}

// BackRepoLine.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoLine *BackRepoLineStruct) CheckoutPhaseOne() (Error error) {

	lineDBArray := make([]LineDB, 0)
	query := backRepoLine.db.Find(&lineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, lineDB := range lineDBArray {
		backRepoLine.CheckoutPhaseOneInstance(&lineDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a lineDB that has been found in the DB, updates the backRepo and stages the
// models version of the lineDB
func (backRepoLine *BackRepoLineStruct) CheckoutPhaseOneInstance(lineDB *LineDB) (Error error) {

	// if absent, create entries in the backRepoLine maps.
	lineWithNewFieldValues := lineDB.Line
	if _, ok := (*backRepoLine.Map_LineDBID_LinePtr)[lineDB.ID]; !ok {

		(*backRepoLine.Map_LineDBID_LinePtr)[lineDB.ID] = &lineWithNewFieldValues
		(*backRepoLine.Map_LinePtr_LineDBID)[&lineWithNewFieldValues] = lineDB.ID

		// append model store with the new element
		lineWithNewFieldValues.Stage()
	}
	lineDBWithNewFieldValues := *lineDB
	(*backRepoLine.Map_LineDBID_LineDB)[lineDB.ID] = &lineDBWithNewFieldValues

	return
}

// BackRepoLine.CheckoutPhaseTwo Checkouts all staged instances of Line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine *BackRepoLineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, lineDB := range *backRepoLine.Map_LineDBID_LineDB {
		backRepoLine.CheckoutPhaseTwoInstance(backRepo, lineDB)
	}
	return
}

// BackRepoLine.CheckoutPhaseTwoInstance Checkouts staged instances of Line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine *BackRepoLineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, lineDB *LineDB) (Error error) {

	line := (*backRepoLine.Map_LineDBID_LinePtr)[lineDB.ID]
	_ = line // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			line.Name = lineDB.Name_Data.String

			line.X1 = lineDB.X1_Data.Float64

			line.Y1 = lineDB.Y1_Data.Float64

			line.X2 = lineDB.X2_Data.Float64

			line.Y2 = lineDB.Y2_Data.Float64

			line.Color = lineDB.Color_Data.String

			line.FillOpacity = lineDB.FillOpacity_Data.Float64

			line.Stroke = lineDB.Stroke_Data.String

			line.StrokeWidth = lineDB.StrokeWidth_Data.Float64

			line.StrokeDashArray = lineDB.StrokeDashArray_Data.String

			line.Transform = lineDB.Transform_Data.String

		}
	}
	return
}

// CommitLine allows commit of a single line (if already staged)
func (backRepo *BackRepoStruct) CommitLine(line *models.Line) {
	backRepo.BackRepoLine.CommitPhaseOneInstance(line)
	if id, ok := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[line]; ok {
		backRepo.BackRepoLine.CommitPhaseTwoInstance(backRepo, id, line)
	}
}

// CommitLine allows checkout of a single line (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLine(line *models.Line) {
	// check if the line is staged
	if _, ok := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[line]; ok {

		if id, ok := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[line]; ok {
			var lineDB LineDB
			lineDB.ID = id

			if err := backRepo.BackRepoLine.db.First(&lineDB, id).Error; err != nil {
				log.Panicln("CheckoutLine : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLine.CheckoutPhaseOneInstance(&lineDB)
			backRepo.BackRepoLine.CheckoutPhaseTwoInstance(backRepo, &lineDB)
		}
	}
}
