// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Path sql.NullBool
var __Path_time__dummyDeclaration time.Duration

// PathAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pathAPI
type PathAPI struct {
	models.Path

	// insertion for fields declaration
	// Declation for basic field pathDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field pathDB.Definition {{BasicKind}} (to be completed)
	Definition_Data sql.NullString

	// Declation for basic field pathDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field pathDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field pathDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field pathDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field pathDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// Implementation of a reverse ID for field SVG{}.Paths []*Path
	SVG_PathsDBID sql.NullInt64

	// end of insertion
}

// PathDB describes a path in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model pathDB
type PathDB struct {
	gorm.Model

	PathAPI
}

// PathDBs arrays pathDBs
// swagger:response pathDBsResponse
type PathDBs []PathDB

// PathDBResponse provides response
// swagger:response pathDBResponse
type PathDBResponse struct {
	PathDB
}

type BackRepoPathStruct struct {
	// stores PathDB according to their gorm ID
	Map_PathDBID_PathDB *map[uint]*PathDB

	// stores PathDB ID according to Path address
	Map_PathPtr_PathDBID *map[*models.Path]uint

	// stores Path according to their gorm ID
	Map_PathDBID_PathPtr *map[uint]*models.Path

	db *gorm.DB
}

// BackRepoPath.Init set up the BackRepo of the Path
func (backRepoPath *BackRepoPathStruct) Init(db *gorm.DB) (Error error) {

	if backRepoPath.Map_PathDBID_PathPtr != nil {
		err := errors.New("In Init, backRepoPath.Map_PathDBID_PathPtr should be nil")
		return err
	}

	if backRepoPath.Map_PathDBID_PathDB != nil {
		err := errors.New("In Init, backRepoPath.Map_PathDBID_PathDB should be nil")
		return err
	}

	if backRepoPath.Map_PathPtr_PathDBID != nil {
		err := errors.New("In Init, backRepoPath.Map_PathPtr_PathDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Path, 0)
	backRepoPath.Map_PathDBID_PathPtr = &tmp

	tmpDB := make(map[uint]*PathDB, 0)
	backRepoPath.Map_PathDBID_PathDB = &tmpDB

	tmpID := make(map[*models.Path]uint, 0)
	backRepoPath.Map_PathPtr_PathDBID = &tmpID

	backRepoPath.db = db
	return
}

// BackRepoPath.CommitPhaseOne commits all staged instances of Path to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPath *BackRepoPathStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for path := range stage.Paths {
		backRepoPath.CommitPhaseOneInstance(path)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, path := range *backRepoPath.Map_PathDBID_PathPtr {
		if _, ok := stage.Paths[path]; !ok {
			backRepoPath.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPath.CommitDeleteInstance commits deletion of Path to the BackRepo
func (backRepoPath *BackRepoPathStruct) CommitDeleteInstance(id uint) (Error error) {

	path := (*backRepoPath.Map_PathDBID_PathPtr)[id]

	// path is not staged anymore, remove pathDB
	pathDB := (*backRepoPath.Map_PathDBID_PathDB)[id]
	query := backRepoPath.db.Unscoped().Delete(&pathDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoPath.Map_PathPtr_PathDBID), path)
	delete((*backRepoPath.Map_PathDBID_PathPtr), id)
	delete((*backRepoPath.Map_PathDBID_PathDB), id)

	return
}

// BackRepoPath.CommitPhaseOneInstance commits path staged instances of Path to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPath *BackRepoPathStruct) CommitPhaseOneInstance(path *models.Path) (Error error) {

	// check if the path is not commited yet
	if _, ok := (*backRepoPath.Map_PathPtr_PathDBID)[path]; ok {
		return
	}

	// initiate path
	var pathDB PathDB
	pathDB.Path = *path

	query := backRepoPath.db.Create(&pathDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoPath.Map_PathPtr_PathDBID)[path] = pathDB.ID
	(*backRepoPath.Map_PathDBID_PathPtr)[pathDB.ID] = path
	(*backRepoPath.Map_PathDBID_PathDB)[pathDB.ID] = &pathDB

	return
}

// BackRepoPath.CommitPhaseTwo commits all staged instances of Path to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPath *BackRepoPathStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, path := range *backRepoPath.Map_PathDBID_PathPtr {
		backRepoPath.CommitPhaseTwoInstance(backRepo, idx, path)
	}

	return
}

// BackRepoPath.CommitPhaseTwoInstance commits {{structname }} of models.Path to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPath *BackRepoPathStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, path *models.Path) (Error error) {

	// fetch matching pathDB
	if pathDB, ok := (*backRepoPath.Map_PathDBID_PathDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				pathDB.Name_Data.String = path.Name
				pathDB.Name_Data.Valid = true

				pathDB.Definition_Data.String = path.Definition
				pathDB.Definition_Data.Valid = true

				pathDB.Color_Data.String = path.Color
				pathDB.Color_Data.Valid = true

				pathDB.FillOpacity_Data.Float64 = path.FillOpacity
				pathDB.FillOpacity_Data.Valid = true

				pathDB.Stroke_Data.String = path.Stroke
				pathDB.Stroke_Data.Valid = true

				pathDB.StrokeWidth_Data.Float64 = path.StrokeWidth
				pathDB.StrokeWidth_Data.Valid = true

				pathDB.StrokeDashArray_Data.String = path.StrokeDashArray
				pathDB.StrokeDashArray_Data.Valid = true

			}
		}
		query := backRepoPath.db.Save(&pathDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Path intance %s", path.Name))
		return err
	}

	return
}

// BackRepoPath.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoPath *BackRepoPathStruct) CheckoutPhaseOne() (Error error) {

	pathDBArray := make([]PathDB, 0)
	query := backRepoPath.db.Find(&pathDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, pathDB := range pathDBArray {
		backRepoPath.CheckoutPhaseOneInstance(&pathDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a pathDB that has been found in the DB, updates the backRepo and stages the
// models version of the pathDB
func (backRepoPath *BackRepoPathStruct) CheckoutPhaseOneInstance(pathDB *PathDB) (Error error) {

	// if absent, create entries in the backRepoPath maps.
	pathWithNewFieldValues := pathDB.Path
	if _, ok := (*backRepoPath.Map_PathDBID_PathPtr)[pathDB.ID]; !ok {

		(*backRepoPath.Map_PathDBID_PathPtr)[pathDB.ID] = &pathWithNewFieldValues
		(*backRepoPath.Map_PathPtr_PathDBID)[&pathWithNewFieldValues] = pathDB.ID

		// append model store with the new element
		pathWithNewFieldValues.Stage()
	}
	pathDBWithNewFieldValues := *pathDB
	(*backRepoPath.Map_PathDBID_PathDB)[pathDB.ID] = &pathDBWithNewFieldValues

	return
}

// BackRepoPath.CheckoutPhaseTwo Checkouts all staged instances of Path to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPath *BackRepoPathStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pathDB := range *backRepoPath.Map_PathDBID_PathDB {
		backRepoPath.CheckoutPhaseTwoInstance(backRepo, pathDB)
	}
	return
}

// BackRepoPath.CheckoutPhaseTwoInstance Checkouts staged instances of Path to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPath *BackRepoPathStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pathDB *PathDB) (Error error) {

	path := (*backRepoPath.Map_PathDBID_PathPtr)[pathDB.ID]
	_ = path // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			path.Name = pathDB.Name_Data.String

			path.Definition = pathDB.Definition_Data.String

			path.Color = pathDB.Color_Data.String

			path.FillOpacity = pathDB.FillOpacity_Data.Float64

			path.Stroke = pathDB.Stroke_Data.String

			path.StrokeWidth = pathDB.StrokeWidth_Data.Float64

			path.StrokeDashArray = pathDB.StrokeDashArray_Data.String

		}
	}
	return
}

// CommitPath allows commit of a single path (if already staged)
func (backRepo *BackRepoStruct) CommitPath(path *models.Path) {
	backRepo.BackRepoPath.CommitPhaseOneInstance(path)
	if id, ok := (*backRepo.BackRepoPath.Map_PathPtr_PathDBID)[path]; ok {
		backRepo.BackRepoPath.CommitPhaseTwoInstance(backRepo, id, path)
	}
}

// CommitPath allows checkout of a single path (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPath(path *models.Path) {
	// check if the path is staged
	if _, ok := (*backRepo.BackRepoPath.Map_PathPtr_PathDBID)[path]; ok {

		if id, ok := (*backRepo.BackRepoPath.Map_PathPtr_PathDBID)[path]; ok {
			var pathDB PathDB
			pathDB.ID = id

			if err := backRepo.BackRepoPath.db.First(&pathDB, id).Error; err != nil {
				log.Panicln("CheckoutPath : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPath.CheckoutPhaseOneInstance(&pathDB)
			backRepo.BackRepoPath.CheckoutPhaseTwoInstance(backRepo, &pathDB)
		}
	}
}
