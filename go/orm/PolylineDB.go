// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Polyline sql.NullBool
var __Polyline_time__dummyDeclaration time.Duration
var dummy_Polyline_sort sort.Float64Slice

// PolylineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model polylineAPI
type PolylineAPI struct {
	gorm.Model

	models.Polyline

	// encoding of pointers
	PolylinePointersEnconding
}

// PolylinePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PolylinePointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// Implementation of a reverse ID for field SVG{}.Polylines []*Polyline
	SVG_PolylinesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	SVG_PolylinesDBID_Index sql.NullInt64
}

// PolylineDB describes a polyline in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model polylineDB
type PolylineDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field polylineDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field polylineDB.Points {{BasicKind}} (to be completed)
	Points_Data sql.NullString

	// Declation for basic field polylineDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field polylineDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field polylineDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field polylineDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field polylineDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// Declation for basic field polylineDB.Transform {{BasicKind}} (to be completed)
	Transform_Data sql.NullString

	// encoding of pointers
	PolylinePointersEnconding
}

// PolylineDBs arrays polylineDBs
// swagger:response polylineDBsResponse
type PolylineDBs []PolylineDB

// PolylineDBResponse provides response
// swagger:response polylineDBResponse
type PolylineDBResponse struct {
	PolylineDB
}

type BackRepoPolylineStruct struct {
	// stores PolylineDB according to their gorm ID
	Map_PolylineDBID_PolylineDB *map[uint]*PolylineDB

	// stores PolylineDB ID according to Polyline address
	Map_PolylinePtr_PolylineDBID *map[*models.Polyline]uint

	// stores Polyline according to their gorm ID
	Map_PolylineDBID_PolylinePtr *map[uint]*models.Polyline

	db *gorm.DB
}

func (backRepoPolyline *BackRepoPolylineStruct) GetDB() *gorm.DB {
	return backRepoPolyline.db
}

// GetPolylineDBFromPolylinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoPolyline *BackRepoPolylineStruct) GetPolylineDBFromPolylinePtr(polyline *models.Polyline) (polylineDB *PolylineDB) {
	id := (*backRepoPolyline.Map_PolylinePtr_PolylineDBID)[polyline]
	polylineDB = (*backRepoPolyline.Map_PolylineDBID_PolylineDB)[id]
	return
}

// BackRepoPolyline.Init set up the BackRepo of the Polyline
func (backRepoPolyline *BackRepoPolylineStruct) Init(db *gorm.DB) (Error error) {

	if backRepoPolyline.Map_PolylineDBID_PolylinePtr != nil {
		err := errors.New("In Init, backRepoPolyline.Map_PolylineDBID_PolylinePtr should be nil")
		return err
	}

	if backRepoPolyline.Map_PolylineDBID_PolylineDB != nil {
		err := errors.New("In Init, backRepoPolyline.Map_PolylineDBID_PolylineDB should be nil")
		return err
	}

	if backRepoPolyline.Map_PolylinePtr_PolylineDBID != nil {
		err := errors.New("In Init, backRepoPolyline.Map_PolylinePtr_PolylineDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Polyline, 0)
	backRepoPolyline.Map_PolylineDBID_PolylinePtr = &tmp

	tmpDB := make(map[uint]*PolylineDB, 0)
	backRepoPolyline.Map_PolylineDBID_PolylineDB = &tmpDB

	tmpID := make(map[*models.Polyline]uint, 0)
	backRepoPolyline.Map_PolylinePtr_PolylineDBID = &tmpID

	backRepoPolyline.db = db
	return
}

// BackRepoPolyline.CommitPhaseOne commits all staged instances of Polyline to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPolyline *BackRepoPolylineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for polyline := range stage.Polylines {
		backRepoPolyline.CommitPhaseOneInstance(polyline)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, polyline := range *backRepoPolyline.Map_PolylineDBID_PolylinePtr {
		if _, ok := stage.Polylines[polyline]; !ok {
			backRepoPolyline.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPolyline.CommitDeleteInstance commits deletion of Polyline to the BackRepo
func (backRepoPolyline *BackRepoPolylineStruct) CommitDeleteInstance(id uint) (Error error) {

	polyline := (*backRepoPolyline.Map_PolylineDBID_PolylinePtr)[id]

	// polyline is not staged anymore, remove polylineDB
	polylineDB := (*backRepoPolyline.Map_PolylineDBID_PolylineDB)[id]
	query := backRepoPolyline.db.Unscoped().Delete(&polylineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoPolyline.Map_PolylinePtr_PolylineDBID), polyline)
	delete((*backRepoPolyline.Map_PolylineDBID_PolylinePtr), id)
	delete((*backRepoPolyline.Map_PolylineDBID_PolylineDB), id)

	return
}

// BackRepoPolyline.CommitPhaseOneInstance commits polyline staged instances of Polyline to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPolyline *BackRepoPolylineStruct) CommitPhaseOneInstance(polyline *models.Polyline) (Error error) {

	// check if the polyline is not commited yet
	if _, ok := (*backRepoPolyline.Map_PolylinePtr_PolylineDBID)[polyline]; ok {
		return
	}

	// initiate polyline
	var polylineDB PolylineDB
	polylineDB.CopyBasicFieldsFromPolyline(polyline)

	query := backRepoPolyline.db.Create(&polylineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoPolyline.Map_PolylinePtr_PolylineDBID)[polyline] = polylineDB.ID
	(*backRepoPolyline.Map_PolylineDBID_PolylinePtr)[polylineDB.ID] = polyline
	(*backRepoPolyline.Map_PolylineDBID_PolylineDB)[polylineDB.ID] = &polylineDB

	return
}

// BackRepoPolyline.CommitPhaseTwo commits all staged instances of Polyline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPolyline *BackRepoPolylineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, polyline := range *backRepoPolyline.Map_PolylineDBID_PolylinePtr {
		backRepoPolyline.CommitPhaseTwoInstance(backRepo, idx, polyline)
	}

	return
}

// BackRepoPolyline.CommitPhaseTwoInstance commits {{structname }} of models.Polyline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPolyline *BackRepoPolylineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, polyline *models.Polyline) (Error error) {

	// fetch matching polylineDB
	if polylineDB, ok := (*backRepoPolyline.Map_PolylineDBID_PolylineDB)[idx]; ok {

		polylineDB.CopyBasicFieldsFromPolyline(polyline)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPolyline.db.Save(&polylineDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Polyline intance %s", polyline.Name))
		return err
	}

	return
}

// BackRepoPolyline.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoPolyline *BackRepoPolylineStruct) CheckoutPhaseOne() (Error error) {

	polylineDBArray := make([]PolylineDB, 0)
	query := backRepoPolyline.db.Find(&polylineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, polylineDB := range polylineDBArray {
		backRepoPolyline.CheckoutPhaseOneInstance(&polylineDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a polylineDB that has been found in the DB, updates the backRepo and stages the
// models version of the polylineDB
func (backRepoPolyline *BackRepoPolylineStruct) CheckoutPhaseOneInstance(polylineDB *PolylineDB) (Error error) {

	polyline, ok := (*backRepoPolyline.Map_PolylineDBID_PolylinePtr)[polylineDB.ID]
	if !ok {
		polyline = new(models.Polyline)

		(*backRepoPolyline.Map_PolylineDBID_PolylinePtr)[polylineDB.ID] = polyline
		(*backRepoPolyline.Map_PolylinePtr_PolylineDBID)[polyline] = polylineDB.ID

		// append model store with the new element
		polyline.Stage()
	}
	polylineDB.CopyBasicFieldsToPolyline(polyline)

	// preserve pointer to aclassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PolylineDBID_PolylineDB)[polylineDB hold variable pointers
	polylineDB_Data := *polylineDB
	preservedPtrToPolyline := &polylineDB_Data
	(*backRepoPolyline.Map_PolylineDBID_PolylineDB)[polylineDB.ID] = preservedPtrToPolyline

	return
}

// BackRepoPolyline.CheckoutPhaseTwo Checkouts all staged instances of Polyline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPolyline *BackRepoPolylineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, polylineDB := range *backRepoPolyline.Map_PolylineDBID_PolylineDB {
		backRepoPolyline.CheckoutPhaseTwoInstance(backRepo, polylineDB)
	}
	return
}

// BackRepoPolyline.CheckoutPhaseTwoInstance Checkouts staged instances of Polyline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPolyline *BackRepoPolylineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, polylineDB *PolylineDB) (Error error) {

	polyline := (*backRepoPolyline.Map_PolylineDBID_PolylinePtr)[polylineDB.ID]
	_ = polyline // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitPolyline allows commit of a single polyline (if already staged)
func (backRepo *BackRepoStruct) CommitPolyline(polyline *models.Polyline) {
	backRepo.BackRepoPolyline.CommitPhaseOneInstance(polyline)
	if id, ok := (*backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID)[polyline]; ok {
		backRepo.BackRepoPolyline.CommitPhaseTwoInstance(backRepo, id, polyline)
	}
}

// CommitPolyline allows checkout of a single polyline (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPolyline(polyline *models.Polyline) {
	// check if the polyline is staged
	if _, ok := (*backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID)[polyline]; ok {

		if id, ok := (*backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID)[polyline]; ok {
			var polylineDB PolylineDB
			polylineDB.ID = id

			if err := backRepo.BackRepoPolyline.db.First(&polylineDB, id).Error; err != nil {
				log.Panicln("CheckoutPolyline : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPolyline.CheckoutPhaseOneInstance(&polylineDB)
			backRepo.BackRepoPolyline.CheckoutPhaseTwoInstance(backRepo, &polylineDB)
		}
	}
}

// CopyBasicFieldsToPolylineDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (polylineDB *PolylineDB) CopyBasicFieldsFromPolyline(polyline *models.Polyline) {
	// insertion point for fields commit
	polylineDB.Name_Data.String = polyline.Name
	polylineDB.Name_Data.Valid = true

	polylineDB.Points_Data.String = polyline.Points
	polylineDB.Points_Data.Valid = true

	polylineDB.Color_Data.String = polyline.Color
	polylineDB.Color_Data.Valid = true

	polylineDB.FillOpacity_Data.Float64 = polyline.FillOpacity
	polylineDB.FillOpacity_Data.Valid = true

	polylineDB.Stroke_Data.String = polyline.Stroke
	polylineDB.Stroke_Data.Valid = true

	polylineDB.StrokeWidth_Data.Float64 = polyline.StrokeWidth
	polylineDB.StrokeWidth_Data.Valid = true

	polylineDB.StrokeDashArray_Data.String = polyline.StrokeDashArray
	polylineDB.StrokeDashArray_Data.Valid = true

	polylineDB.Transform_Data.String = polyline.Transform
	polylineDB.Transform_Data.Valid = true

}

// CopyBasicFieldsToPolylineDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (polylineDB *PolylineDB) CopyBasicFieldsToPolyline(polyline *models.Polyline) {

	// insertion point for checkout of basic fields (back repo to stage)
	polyline.Name = polylineDB.Name_Data.String
	polyline.Points = polylineDB.Points_Data.String
	polyline.Color = polylineDB.Color_Data.String
	polyline.FillOpacity = polylineDB.FillOpacity_Data.Float64
	polyline.Stroke = polylineDB.Stroke_Data.String
	polyline.StrokeWidth = polylineDB.StrokeWidth_Data.Float64
	polyline.StrokeDashArray = polylineDB.StrokeDashArray_Data.String
	polyline.Transform = polylineDB.Transform_Data.String
}

// Backup generates a json file from a slice of all PolylineDB instances in the backrepo
func (backRepoPolyline *BackRepoPolylineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PolylineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	var forBackup []*PolylineDB
	for _, polylineDB := range *backRepoPolyline.Map_PolylineDBID_PolylineDB {
		forBackup = append(forBackup, polylineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Polyline ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Polyline file", err.Error())
	}
}

func (backRepoPolyline *BackRepoPolylineStruct) Restore(dirPath string) {

	filename := filepath.Join(dirPath, "PolylineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Polyline file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PolylineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PolylineDBID_PolylineDB
	for _, polylineDB := range forRestore {

		polylineDB_ID := polylineDB.ID
		polylineDB.ID = 0
		query := backRepoPolyline.db.Create(polylineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		if polylineDB_ID != polylineDB.ID {
			log.Panicf("ID of Polyline restore ID %d, name %s, has wrong ID %d in DB after create",
				polylineDB_ID, polylineDB.Name_Data.String, polylineDB.ID)
		}
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Polyline file", err.Error())
	}
}
