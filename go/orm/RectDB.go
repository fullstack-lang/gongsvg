// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Rect sql.NullBool
var __Rect_time__dummyDeclaration time.Duration

// RectAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model rectAPI
type RectAPI struct {
	models.Rect

	// insertion for fields declaration
	// Declation for basic field rectDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field rectDB.X {{BasicKind}} (to be completed)
	X_Data sql.NullFloat64

	// Declation for basic field rectDB.Y {{BasicKind}} (to be completed)
	Y_Data sql.NullFloat64

	// Declation for basic field rectDB.Width {{BasicKind}} (to be completed)
	Width_Data sql.NullFloat64

	// Declation for basic field rectDB.Height {{BasicKind}} (to be completed)
	Height_Data sql.NullFloat64

	// Declation for basic field rectDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Implementation of a reverse ID for field SVG{}.Rects []*Rect
	SVG_RectsDBID sql.NullInt64

	// end of insertion
}

// RectDB describes a rect in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model rectDB
type RectDB struct {
	gorm.Model

	RectAPI
}

// RectDBs arrays rectDBs
// swagger:response rectDBsResponse
type RectDBs []RectDB

// RectDBResponse provides response
// swagger:response rectDBResponse
type RectDBResponse struct {
	RectDB
}

type BackRepoRectStruct struct {
	// stores RectDB according to their gorm ID
	Map_RectDBID_RectDB *map[uint]*RectDB

	// stores RectDB ID according to Rect address
	Map_RectPtr_RectDBID *map[*models.Rect]uint

	// stores Rect according to their gorm ID
	Map_RectDBID_RectPtr *map[uint]*models.Rect

	db *gorm.DB
}

// BackRepoRect.Init set up the BackRepo of the Rect
func (backRepoRect *BackRepoRectStruct) Init(db *gorm.DB) (Error error) {

	if backRepoRect.Map_RectDBID_RectPtr != nil {
		err := errors.New("In Init, backRepoRect.Map_RectDBID_RectPtr should be nil")
		return err
	}

	if backRepoRect.Map_RectDBID_RectDB != nil {
		err := errors.New("In Init, backRepoRect.Map_RectDBID_RectDB should be nil")
		return err
	}

	if backRepoRect.Map_RectPtr_RectDBID != nil {
		err := errors.New("In Init, backRepoRect.Map_RectPtr_RectDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Rect, 0)
	backRepoRect.Map_RectDBID_RectPtr = &tmp

	tmpDB := make(map[uint]*RectDB, 0)
	backRepoRect.Map_RectDBID_RectDB = &tmpDB

	tmpID := make(map[*models.Rect]uint, 0)
	backRepoRect.Map_RectPtr_RectDBID = &tmpID

	backRepoRect.db = db
	return
}

// BackRepoRect.CommitPhaseOne commits all staged instances of Rect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRect *BackRepoRectStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for rect := range stage.Rects {
		backRepoRect.CommitPhaseOneInstance(rect)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, rect := range *backRepoRect.Map_RectDBID_RectPtr {
		if _, ok := stage.Rects[rect]; !ok {
			backRepoRect.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRect.CommitDeleteInstance commits deletion of Rect to the BackRepo
func (backRepoRect *BackRepoRectStruct) CommitDeleteInstance(id uint) (Error error) {

	rect := (*backRepoRect.Map_RectDBID_RectPtr)[id]

	// rect is not staged anymore, remove rectDB
	rectDB := (*backRepoRect.Map_RectDBID_RectDB)[id]
	query := backRepoRect.db.Unscoped().Delete(&rectDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoRect.Map_RectPtr_RectDBID), rect)
	delete((*backRepoRect.Map_RectDBID_RectPtr), id)
	delete((*backRepoRect.Map_RectDBID_RectDB), id)

	return
}

// BackRepoRect.CommitPhaseOneInstance commits rect staged instances of Rect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRect *BackRepoRectStruct) CommitPhaseOneInstance(rect *models.Rect) (Error error) {

	// check if the rect is not commited yet
	if _, ok := (*backRepoRect.Map_RectPtr_RectDBID)[rect]; ok {
		return
	}

	// initiate rect
	var rectDB RectDB
	rectDB.Rect = *rect

	query := backRepoRect.db.Create(&rectDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoRect.Map_RectPtr_RectDBID)[rect] = rectDB.ID
	(*backRepoRect.Map_RectDBID_RectPtr)[rectDB.ID] = rect
	(*backRepoRect.Map_RectDBID_RectDB)[rectDB.ID] = &rectDB

	return
}

// BackRepoRect.CommitPhaseTwo commits all staged instances of Rect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRect *BackRepoRectStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, rect := range *backRepoRect.Map_RectDBID_RectPtr {
		backRepoRect.CommitPhaseTwoInstance(backRepo, idx, rect)
	}

	return
}

// BackRepoRect.CommitPhaseTwoInstance commits {{structname }} of models.Rect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRect *BackRepoRectStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, rect *models.Rect) (Error error) {

	// fetch matching rectDB
	if rectDB, ok := (*backRepoRect.Map_RectDBID_RectDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				rectDB.Name_Data.String = rect.Name
				rectDB.Name_Data.Valid = true

				rectDB.X_Data.Float64 = rect.X
				rectDB.X_Data.Valid = true

				rectDB.Y_Data.Float64 = rect.Y
				rectDB.Y_Data.Valid = true

				rectDB.Width_Data.Float64 = rect.Width
				rectDB.Width_Data.Valid = true

				rectDB.Height_Data.Float64 = rect.Height
				rectDB.Height_Data.Valid = true

				rectDB.Color_Data.String = rect.Color
				rectDB.Color_Data.Valid = true

			}
		}
		query := backRepoRect.db.Save(&rectDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Rect intance %s", rect.Name))
		return err
	}

	return
}

// BackRepoRect.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoRect *BackRepoRectStruct) CheckoutPhaseOne() (Error error) {

	rectDBArray := make([]RectDB, 0)
	query := backRepoRect.db.Find(&rectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, rectDB := range rectDBArray {
		backRepoRect.CheckoutPhaseOneInstance(&rectDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a rectDB that has been found in the DB, updates the backRepo and stages the
// models version of the rectDB
func (backRepoRect *BackRepoRectStruct) CheckoutPhaseOneInstance(rectDB *RectDB) (Error error) {

	// if absent, create entries in the backRepoRect maps.
	rectWithNewFieldValues := rectDB.Rect
	if _, ok := (*backRepoRect.Map_RectDBID_RectPtr)[rectDB.ID]; !ok {

		(*backRepoRect.Map_RectDBID_RectPtr)[rectDB.ID] = &rectWithNewFieldValues
		(*backRepoRect.Map_RectPtr_RectDBID)[&rectWithNewFieldValues] = rectDB.ID

		// append model store with the new element
		rectWithNewFieldValues.Stage()
	}
	rectDBWithNewFieldValues := *rectDB
	(*backRepoRect.Map_RectDBID_RectDB)[rectDB.ID] = &rectDBWithNewFieldValues

	return
}

// BackRepoRect.CheckoutPhaseTwo Checkouts all staged instances of Rect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRect *BackRepoRectStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, rectDB := range *backRepoRect.Map_RectDBID_RectDB {
		backRepoRect.CheckoutPhaseTwoInstance(backRepo, rectDB)
	}
	return
}

// BackRepoRect.CheckoutPhaseTwoInstance Checkouts staged instances of Rect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRect *BackRepoRectStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, rectDB *RectDB) (Error error) {

	rect := (*backRepoRect.Map_RectDBID_RectPtr)[rectDB.ID]
	_ = rect // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			rect.Name = rectDB.Name_Data.String

			rect.X = rectDB.X_Data.Float64

			rect.Y = rectDB.Y_Data.Float64

			rect.Width = rectDB.Width_Data.Float64

			rect.Height = rectDB.Height_Data.Float64

			rect.Color = rectDB.Color_Data.String

		}
	}
	return
}

// CommitRect allows commit of a single rect (if already staged)
func (backRepo *BackRepoStruct) CommitRect(rect *models.Rect) {
	backRepo.BackRepoRect.CommitPhaseOneInstance(rect)
	if id, ok := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[rect]; ok {
		backRepo.BackRepoRect.CommitPhaseTwoInstance(backRepo, id, rect)
	}
}

// CommitRect allows checkout of a single rect (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRect(rect *models.Rect) {
	// check if the rect is staged
	if _, ok := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[rect]; ok {

		if id, ok := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[rect]; ok {
			var rectDB RectDB
			rectDB.ID = id

			if err := backRepo.BackRepoRect.db.First(&rectDB, id).Error; err != nil {
				log.Panicln("CheckoutRect : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRect.CheckoutPhaseOneInstance(&rectDB)
			backRepo.BackRepoRect.CheckoutPhaseTwoInstance(backRepo, &rectDB)
		}
	}
}
