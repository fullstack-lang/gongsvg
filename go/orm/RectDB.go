// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Rect sql.NullBool
var __Rect_time__dummyDeclaration time.Duration
var dummy_Rect_sort sort.Float64Slice

// RectAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model rectAPI
type RectAPI struct {
	gorm.Model

	models.Rect

	// encoding of pointers
	RectPointersEnconding
}

// RectPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RectPointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// Implementation of a reverse ID for field SVG{}.Rects []*Rect
	SVG_RectsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	SVG_RectsDBID_Index sql.NullInt64
}

// RectDB describes a rect in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model rectDB
type RectDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field rectDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field rectDB.X {{BasicKind}} (to be completed)
	X_Data sql.NullFloat64

	// Declation for basic field rectDB.Y {{BasicKind}} (to be completed)
	Y_Data sql.NullFloat64

	// Declation for basic field rectDB.Width {{BasicKind}} (to be completed)
	Width_Data sql.NullFloat64

	// Declation for basic field rectDB.Height {{BasicKind}} (to be completed)
	Height_Data sql.NullFloat64

	// Declation for basic field rectDB.RX {{BasicKind}} (to be completed)
	RX_Data sql.NullFloat64

	// Declation for basic field rectDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field rectDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field rectDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field rectDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field rectDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// Declation for basic field rectDB.Transform {{BasicKind}} (to be completed)
	Transform_Data sql.NullString

	// encoding of pointers
	RectPointersEnconding
}

// RectDBs arrays rectDBs
// swagger:response rectDBsResponse
type RectDBs []RectDB

// RectDBResponse provides response
// swagger:response rectDBResponse
type RectDBResponse struct {
	RectDB
}

type BackRepoRectStruct struct {
	// stores RectDB according to their gorm ID
	Map_RectDBID_RectDB *map[uint]*RectDB

	// stores RectDB ID according to Rect address
	Map_RectPtr_RectDBID *map[*models.Rect]uint

	// stores Rect according to their gorm ID
	Map_RectDBID_RectPtr *map[uint]*models.Rect

	db *gorm.DB
}

func (backRepoRect *BackRepoRectStruct) GetDB() *gorm.DB {
	return backRepoRect.db
}

// GetRectDBFromRectPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRect *BackRepoRectStruct) GetRectDBFromRectPtr(rect *models.Rect) (rectDB *RectDB) {
	id := (*backRepoRect.Map_RectPtr_RectDBID)[rect]
	rectDB = (*backRepoRect.Map_RectDBID_RectDB)[id]
	return
}

// BackRepoRect.Init set up the BackRepo of the Rect
func (backRepoRect *BackRepoRectStruct) Init(db *gorm.DB) (Error error) {

	if backRepoRect.Map_RectDBID_RectPtr != nil {
		err := errors.New("In Init, backRepoRect.Map_RectDBID_RectPtr should be nil")
		return err
	}

	if backRepoRect.Map_RectDBID_RectDB != nil {
		err := errors.New("In Init, backRepoRect.Map_RectDBID_RectDB should be nil")
		return err
	}

	if backRepoRect.Map_RectPtr_RectDBID != nil {
		err := errors.New("In Init, backRepoRect.Map_RectPtr_RectDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Rect, 0)
	backRepoRect.Map_RectDBID_RectPtr = &tmp

	tmpDB := make(map[uint]*RectDB, 0)
	backRepoRect.Map_RectDBID_RectDB = &tmpDB

	tmpID := make(map[*models.Rect]uint, 0)
	backRepoRect.Map_RectPtr_RectDBID = &tmpID

	backRepoRect.db = db
	return
}

// BackRepoRect.CommitPhaseOne commits all staged instances of Rect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRect *BackRepoRectStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for rect := range stage.Rects {
		backRepoRect.CommitPhaseOneInstance(rect)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, rect := range *backRepoRect.Map_RectDBID_RectPtr {
		if _, ok := stage.Rects[rect]; !ok {
			backRepoRect.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRect.CommitDeleteInstance commits deletion of Rect to the BackRepo
func (backRepoRect *BackRepoRectStruct) CommitDeleteInstance(id uint) (Error error) {

	rect := (*backRepoRect.Map_RectDBID_RectPtr)[id]

	// rect is not staged anymore, remove rectDB
	rectDB := (*backRepoRect.Map_RectDBID_RectDB)[id]
	query := backRepoRect.db.Unscoped().Delete(&rectDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoRect.Map_RectPtr_RectDBID), rect)
	delete((*backRepoRect.Map_RectDBID_RectPtr), id)
	delete((*backRepoRect.Map_RectDBID_RectDB), id)

	return
}

// BackRepoRect.CommitPhaseOneInstance commits rect staged instances of Rect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRect *BackRepoRectStruct) CommitPhaseOneInstance(rect *models.Rect) (Error error) {

	// check if the rect is not commited yet
	if _, ok := (*backRepoRect.Map_RectPtr_RectDBID)[rect]; ok {
		return
	}

	// initiate rect
	var rectDB RectDB
	rectDB.CopyBasicFieldsFromRect(rect)

	query := backRepoRect.db.Create(&rectDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoRect.Map_RectPtr_RectDBID)[rect] = rectDB.ID
	(*backRepoRect.Map_RectDBID_RectPtr)[rectDB.ID] = rect
	(*backRepoRect.Map_RectDBID_RectDB)[rectDB.ID] = &rectDB

	return
}

// BackRepoRect.CommitPhaseTwo commits all staged instances of Rect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRect *BackRepoRectStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, rect := range *backRepoRect.Map_RectDBID_RectPtr {
		backRepoRect.CommitPhaseTwoInstance(backRepo, idx, rect)
	}

	return
}

// BackRepoRect.CommitPhaseTwoInstance commits {{structname }} of models.Rect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRect *BackRepoRectStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, rect *models.Rect) (Error error) {

	// fetch matching rectDB
	if rectDB, ok := (*backRepoRect.Map_RectDBID_RectDB)[idx]; ok {

		rectDB.CopyBasicFieldsFromRect(rect)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoRect.db.Save(&rectDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Rect intance %s", rect.Name))
		return err
	}

	return
}

// BackRepoRect.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoRect *BackRepoRectStruct) CheckoutPhaseOne() (Error error) {

	rectDBArray := make([]RectDB, 0)
	query := backRepoRect.db.Find(&rectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, rectDB := range rectDBArray {
		backRepoRect.CheckoutPhaseOneInstance(&rectDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a rectDB that has been found in the DB, updates the backRepo and stages the
// models version of the rectDB
func (backRepoRect *BackRepoRectStruct) CheckoutPhaseOneInstance(rectDB *RectDB) (Error error) {

	rect, ok := (*backRepoRect.Map_RectDBID_RectPtr)[rectDB.ID]
	if !ok {
		rect = new(models.Rect)

		(*backRepoRect.Map_RectDBID_RectPtr)[rectDB.ID] = rect
		(*backRepoRect.Map_RectPtr_RectDBID)[rect] = rectDB.ID

		// append model store with the new element
		rect.Stage()
	}
	rectDB.CopyBasicFieldsToRect(rect)

	// preserve pointer to rectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RectDBID_RectDB)[rectDB hold variable pointers
	rectDB_Data := *rectDB
	preservedPtrToRect := &rectDB_Data
	(*backRepoRect.Map_RectDBID_RectDB)[rectDB.ID] = preservedPtrToRect

	return
}

// BackRepoRect.CheckoutPhaseTwo Checkouts all staged instances of Rect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRect *BackRepoRectStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, rectDB := range *backRepoRect.Map_RectDBID_RectDB {
		backRepoRect.CheckoutPhaseTwoInstance(backRepo, rectDB)
	}
	return
}

// BackRepoRect.CheckoutPhaseTwoInstance Checkouts staged instances of Rect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRect *BackRepoRectStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, rectDB *RectDB) (Error error) {

	rect := (*backRepoRect.Map_RectDBID_RectPtr)[rectDB.ID]
	_ = rect // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitRect allows commit of a single rect (if already staged)
func (backRepo *BackRepoStruct) CommitRect(rect *models.Rect) {
	backRepo.BackRepoRect.CommitPhaseOneInstance(rect)
	if id, ok := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[rect]; ok {
		backRepo.BackRepoRect.CommitPhaseTwoInstance(backRepo, id, rect)
	}
}

// CommitRect allows checkout of a single rect (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRect(rect *models.Rect) {
	// check if the rect is staged
	if _, ok := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[rect]; ok {

		if id, ok := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[rect]; ok {
			var rectDB RectDB
			rectDB.ID = id

			if err := backRepo.BackRepoRect.db.First(&rectDB, id).Error; err != nil {
				log.Panicln("CheckoutRect : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRect.CheckoutPhaseOneInstance(&rectDB)
			backRepo.BackRepoRect.CheckoutPhaseTwoInstance(backRepo, &rectDB)
		}
	}
}

// CopyBasicFieldsToRectDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (rectDB *RectDB) CopyBasicFieldsFromRect(rect *models.Rect) {
	// insertion point for fields commit
	rectDB.Name_Data.String = rect.Name
	rectDB.Name_Data.Valid = true

	rectDB.X_Data.Float64 = rect.X
	rectDB.X_Data.Valid = true

	rectDB.Y_Data.Float64 = rect.Y
	rectDB.Y_Data.Valid = true

	rectDB.Width_Data.Float64 = rect.Width
	rectDB.Width_Data.Valid = true

	rectDB.Height_Data.Float64 = rect.Height
	rectDB.Height_Data.Valid = true

	rectDB.RX_Data.Float64 = rect.RX
	rectDB.RX_Data.Valid = true

	rectDB.Color_Data.String = rect.Color
	rectDB.Color_Data.Valid = true

	rectDB.FillOpacity_Data.Float64 = rect.FillOpacity
	rectDB.FillOpacity_Data.Valid = true

	rectDB.Stroke_Data.String = rect.Stroke
	rectDB.Stroke_Data.Valid = true

	rectDB.StrokeWidth_Data.Float64 = rect.StrokeWidth
	rectDB.StrokeWidth_Data.Valid = true

	rectDB.StrokeDashArray_Data.String = rect.StrokeDashArray
	rectDB.StrokeDashArray_Data.Valid = true

	rectDB.Transform_Data.String = rect.Transform
	rectDB.Transform_Data.Valid = true

}

// CopyBasicFieldsToRectDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (rectDB *RectDB) CopyBasicFieldsToRect(rect *models.Rect) {

	// insertion point for checkout of basic fields (back repo to stage)
	rect.Name = rectDB.Name_Data.String
	rect.X = rectDB.X_Data.Float64
	rect.Y = rectDB.Y_Data.Float64
	rect.Width = rectDB.Width_Data.Float64
	rect.Height = rectDB.Height_Data.Float64
	rect.RX = rectDB.RX_Data.Float64
	rect.Color = rectDB.Color_Data.String
	rect.FillOpacity = rectDB.FillOpacity_Data.Float64
	rect.Stroke = rectDB.Stroke_Data.String
	rect.StrokeWidth = rectDB.StrokeWidth_Data.Float64
	rect.StrokeDashArray = rectDB.StrokeDashArray_Data.String
	rect.Transform = rectDB.Transform_Data.String
}

// Backup generates a json file from a slice of all RectDB instances in the backrepo
func (backRepoRect *BackRepoRectStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RectDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RectDB, 0)
	for _, rectDB := range *backRepoRect.Map_RectDBID_RectDB {
		forBackup = append(forBackup, rectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Rect ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Rect file", err.Error())
	}
}

// RestorePhaseOne read the file "RectDB.json" in dirPath that stores an array
// of RectDB and stores it in the database
// the map BackRepoRectid_atBckpTime_newID is updated accordingly
func (backRepoRect *BackRepoRectStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRectid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RectDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Rect file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RectDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RectDBID_RectDB
	for _, rectDB := range forRestore {

		rectDB_ID_atBackupTime := rectDB.ID
		rectDB.ID = 0
		query := backRepoRect.db.Create(rectDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoRect.Map_RectDBID_RectDB)[rectDB.ID] = rectDB
		BackRepoRectid_atBckpTime_newID[rectDB_ID_atBackupTime] = rectDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Rect file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Rect>id_atBckpTime_newID
// to compute new index
func (backRepoRect *BackRepoRectStruct) RestorePhaseTwo() {

	for _, rectDB := range (*backRepoRect.Map_RectDBID_RectDB) {

		// next line of code is to avert unused variable compilation error
		_ = rectDB

		// insertion point for reindexing pointers encoding
		// This reindex rect.Rects
		if rectDB.SVG_RectsDBID.Int64 != 0 {
			rectDB.SVG_RectsDBID.Int64 = 
				int64(BackRepoSVGid_atBckpTime_newID[uint(rectDB.SVG_RectsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoRect.db.Model(rectDB).Updates(*rectDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRectid_atBckpTime_newID map[uint]uint
