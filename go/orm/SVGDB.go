// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SVG sql.NullBool
var __SVG_time__dummyDeclaration time.Duration
var dummy_SVG_sort sort.Float64Slice

// SVGAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model svgAPI
type SVGAPI struct {
	models.SVG

	// insertion for fields declaration
	// Declation for basic field svgDB.Display bool (to be completed)
	// provide the sql storage for the boolan
	Display_Data sql.NullBool

	// Declation for basic field svgDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// SVGDB describes a svg in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model svgDB
type SVGDB struct {
	gorm.Model

	SVGAPI
}

// SVGDBs arrays svgDBs
// swagger:response svgDBsResponse
type SVGDBs []SVGDB

// SVGDBResponse provides response
// swagger:response svgDBResponse
type SVGDBResponse struct {
	SVGDB
}

type BackRepoSVGStruct struct {
	// stores SVGDB according to their gorm ID
	Map_SVGDBID_SVGDB *map[uint]*SVGDB

	// stores SVGDB ID according to SVG address
	Map_SVGPtr_SVGDBID *map[*models.SVG]uint

	// stores SVG according to their gorm ID
	Map_SVGDBID_SVGPtr *map[uint]*models.SVG

	db *gorm.DB
}

// BackRepoSVG.Init set up the BackRepo of the SVG
func (backRepoSVG *BackRepoSVGStruct) Init(db *gorm.DB) (Error error) {

	if backRepoSVG.Map_SVGDBID_SVGPtr != nil {
		err := errors.New("In Init, backRepoSVG.Map_SVGDBID_SVGPtr should be nil")
		return err
	}

	if backRepoSVG.Map_SVGDBID_SVGDB != nil {
		err := errors.New("In Init, backRepoSVG.Map_SVGDBID_SVGDB should be nil")
		return err
	}

	if backRepoSVG.Map_SVGPtr_SVGDBID != nil {
		err := errors.New("In Init, backRepoSVG.Map_SVGPtr_SVGDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.SVG, 0)
	backRepoSVG.Map_SVGDBID_SVGPtr = &tmp

	tmpDB := make(map[uint]*SVGDB, 0)
	backRepoSVG.Map_SVGDBID_SVGDB = &tmpDB

	tmpID := make(map[*models.SVG]uint, 0)
	backRepoSVG.Map_SVGPtr_SVGDBID = &tmpID

	backRepoSVG.db = db
	return
}

// BackRepoSVG.CommitPhaseOne commits all staged instances of SVG to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSVG *BackRepoSVGStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for svg := range stage.SVGs {
		backRepoSVG.CommitPhaseOneInstance(svg)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, svg := range *backRepoSVG.Map_SVGDBID_SVGPtr {
		if _, ok := stage.SVGs[svg]; !ok {
			backRepoSVG.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSVG.CommitDeleteInstance commits deletion of SVG to the BackRepo
func (backRepoSVG *BackRepoSVGStruct) CommitDeleteInstance(id uint) (Error error) {

	svg := (*backRepoSVG.Map_SVGDBID_SVGPtr)[id]

	// svg is not staged anymore, remove svgDB
	svgDB := (*backRepoSVG.Map_SVGDBID_SVGDB)[id]
	query := backRepoSVG.db.Unscoped().Delete(&svgDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoSVG.Map_SVGPtr_SVGDBID), svg)
	delete((*backRepoSVG.Map_SVGDBID_SVGPtr), id)
	delete((*backRepoSVG.Map_SVGDBID_SVGDB), id)

	return
}

// BackRepoSVG.CommitPhaseOneInstance commits svg staged instances of SVG to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSVG *BackRepoSVGStruct) CommitPhaseOneInstance(svg *models.SVG) (Error error) {

	// check if the svg is not commited yet
	if _, ok := (*backRepoSVG.Map_SVGPtr_SVGDBID)[svg]; ok {
		return
	}

	// initiate svg
	var svgDB SVGDB
	svgDB.SVG = *svg

	query := backRepoSVG.db.Create(&svgDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoSVG.Map_SVGPtr_SVGDBID)[svg] = svgDB.ID
	(*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID] = svg
	(*backRepoSVG.Map_SVGDBID_SVGDB)[svgDB.ID] = &svgDB

	return
}

// BackRepoSVG.CommitPhaseTwo commits all staged instances of SVG to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSVG *BackRepoSVGStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, svg := range *backRepoSVG.Map_SVGDBID_SVGPtr {
		backRepoSVG.CommitPhaseTwoInstance(backRepo, idx, svg)
	}

	return
}

// BackRepoSVG.CommitPhaseTwoInstance commits {{structname }} of models.SVG to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSVG *BackRepoSVGStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, svg *models.SVG) (Error error) {

	// fetch matching svgDB
	if svgDB, ok := (*backRepoSVG.Map_SVGDBID_SVGDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				svgDB.Display_Data.Bool = svg.Display
				svgDB.Display_Data.Valid = true

				svgDB.Name_Data.String = svg.Name
				svgDB.Name_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Rect, i.e.
				for _, rect := range svg.Rects {
					index := 0
					if rectDBID, ok := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[rect]; ok {
						if rectDB, ok := (*backRepo.BackRepoRect.Map_RectDBID_RectDB)[rectDBID]; ok {
							rectDB.SVG_RectsDBID.Int64 = int64(svgDB.ID)
							rectDB.SVG_RectsDBID.Valid = true
							rectDB.SVG_RectsDBID_Index.Int64 = int64(index)
							index = index + 1
							rectDB.SVG_RectsDBID_Index.Valid = true
							if q := backRepoSVG.db.Save(&rectDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Text, i.e.
				for _, text := range svg.Texts {
					index := 0
					if textDBID, ok := (*backRepo.BackRepoText.Map_TextPtr_TextDBID)[text]; ok {
						if textDB, ok := (*backRepo.BackRepoText.Map_TextDBID_TextDB)[textDBID]; ok {
							textDB.SVG_TextsDBID.Int64 = int64(svgDB.ID)
							textDB.SVG_TextsDBID.Valid = true
							textDB.SVG_TextsDBID_Index.Int64 = int64(index)
							index = index + 1
							textDB.SVG_TextsDBID_Index.Valid = true
							if q := backRepoSVG.db.Save(&textDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Circle, i.e.
				for _, circle := range svg.Circles {
					index := 0
					if circleDBID, ok := (*backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID)[circle]; ok {
						if circleDB, ok := (*backRepo.BackRepoCircle.Map_CircleDBID_CircleDB)[circleDBID]; ok {
							circleDB.SVG_CirclesDBID.Int64 = int64(svgDB.ID)
							circleDB.SVG_CirclesDBID.Valid = true
							circleDB.SVG_CirclesDBID_Index.Int64 = int64(index)
							index = index + 1
							circleDB.SVG_CirclesDBID_Index.Valid = true
							if q := backRepoSVG.db.Save(&circleDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Line, i.e.
				for _, line := range svg.Lines {
					index := 0
					if lineDBID, ok := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[line]; ok {
						if lineDB, ok := (*backRepo.BackRepoLine.Map_LineDBID_LineDB)[lineDBID]; ok {
							lineDB.SVG_LinesDBID.Int64 = int64(svgDB.ID)
							lineDB.SVG_LinesDBID.Valid = true
							lineDB.SVG_LinesDBID_Index.Int64 = int64(index)
							index = index + 1
							lineDB.SVG_LinesDBID_Index.Valid = true
							if q := backRepoSVG.db.Save(&lineDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Ellipse, i.e.
				for _, ellipse := range svg.Ellipses {
					index := 0
					if ellipseDBID, ok := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[ellipse]; ok {
						if ellipseDB, ok := (*backRepo.BackRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDBID]; ok {
							ellipseDB.SVG_EllipsesDBID.Int64 = int64(svgDB.ID)
							ellipseDB.SVG_EllipsesDBID.Valid = true
							ellipseDB.SVG_EllipsesDBID_Index.Int64 = int64(index)
							index = index + 1
							ellipseDB.SVG_EllipsesDBID_Index.Valid = true
							if q := backRepoSVG.db.Save(&ellipseDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Polyline, i.e.
				for _, polyline := range svg.Polylines {
					index := 0
					if polylineDBID, ok := (*backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID)[polyline]; ok {
						if polylineDB, ok := (*backRepo.BackRepoPolyline.Map_PolylineDBID_PolylineDB)[polylineDBID]; ok {
							polylineDB.SVG_PolylinesDBID.Int64 = int64(svgDB.ID)
							polylineDB.SVG_PolylinesDBID.Valid = true
							polylineDB.SVG_PolylinesDBID_Index.Int64 = int64(index)
							index = index + 1
							polylineDB.SVG_PolylinesDBID_Index.Valid = true
							if q := backRepoSVG.db.Save(&polylineDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Polygone, i.e.
				for _, polygone := range svg.Polygones {
					index := 0
					if polygoneDBID, ok := (*backRepo.BackRepoPolygone.Map_PolygonePtr_PolygoneDBID)[polygone]; ok {
						if polygoneDB, ok := (*backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygoneDB)[polygoneDBID]; ok {
							polygoneDB.SVG_PolygonesDBID.Int64 = int64(svgDB.ID)
							polygoneDB.SVG_PolygonesDBID.Valid = true
							polygoneDB.SVG_PolygonesDBID_Index.Int64 = int64(index)
							index = index + 1
							polygoneDB.SVG_PolygonesDBID_Index.Valid = true
							if q := backRepoSVG.db.Save(&polygoneDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// commit a slice of pointer translates to update reverse pointer to Path, i.e.
				for _, path := range svg.Paths {
					index := 0
					if pathDBID, ok := (*backRepo.BackRepoPath.Map_PathPtr_PathDBID)[path]; ok {
						if pathDB, ok := (*backRepo.BackRepoPath.Map_PathDBID_PathDB)[pathDBID]; ok {
							pathDB.SVG_PathsDBID.Int64 = int64(svgDB.ID)
							pathDB.SVG_PathsDBID.Valid = true
							pathDB.SVG_PathsDBID_Index.Int64 = int64(index)
							index = index + 1
							pathDB.SVG_PathsDBID_Index.Valid = true
							if q := backRepoSVG.db.Save(&pathDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoSVG.db.Save(&svgDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SVG intance %s", svg.Name))
		return err
	}

	return
}

// BackRepoSVG.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoSVG *BackRepoSVGStruct) CheckoutPhaseOne() (Error error) {

	svgDBArray := make([]SVGDB, 0)
	query := backRepoSVG.db.Find(&svgDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, svgDB := range svgDBArray {
		backRepoSVG.CheckoutPhaseOneInstance(&svgDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a svgDB that has been found in the DB, updates the backRepo and stages the
// models version of the svgDB
func (backRepoSVG *BackRepoSVGStruct) CheckoutPhaseOneInstance(svgDB *SVGDB) (Error error) {

	// if absent, create entries in the backRepoSVG maps.
	svgWithNewFieldValues := svgDB.SVG
	if _, ok := (*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID]; !ok {

		(*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID] = &svgWithNewFieldValues
		(*backRepoSVG.Map_SVGPtr_SVGDBID)[&svgWithNewFieldValues] = svgDB.ID

		// append model store with the new element
		svgWithNewFieldValues.Stage()
	}
	svgDBWithNewFieldValues := *svgDB
	(*backRepoSVG.Map_SVGDBID_SVGDB)[svgDB.ID] = &svgDBWithNewFieldValues

	return
}

// BackRepoSVG.CheckoutPhaseTwo Checkouts all staged instances of SVG to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSVG *BackRepoSVGStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, svgDB := range *backRepoSVG.Map_SVGDBID_SVGDB {
		backRepoSVG.CheckoutPhaseTwoInstance(backRepo, svgDB)
	}
	return
}

// BackRepoSVG.CheckoutPhaseTwoInstance Checkouts staged instances of SVG to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSVG *BackRepoSVGStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, svgDB *SVGDB) (Error error) {

	svg := (*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID]
	_ = svg // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			svg.Display = svgDB.Display_Data.Bool
			svg.Name = svgDB.Name_Data.String

			// parse all RectDB and redeem the array of poiners to SVG
			// first reset the slice
			svg.Rects = svg.Rects[:0]
			for _, RectDB := range *backRepo.BackRepoRect.Map_RectDBID_RectDB {
				if RectDB.SVG_RectsDBID.Int64 == int64(svgDB.ID) {
					Rect := (*backRepo.BackRepoRect.Map_RectDBID_RectPtr)[RectDB.ID]
					svg.Rects = append(svg.Rects, Rect)
				}
			}
			
			// sort the array according to the order
			sort.Slice(svg.Rects, func(i, j int) bool {
				rectDB_i_ID := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[svg.Rects[i]]
				rectDB_j_ID := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[svg.Rects[j]]

				rectDB_i := (*backRepo.BackRepoRect.Map_RectDBID_RectDB)[rectDB_i_ID]
				rectDB_j := (*backRepo.BackRepoRect.Map_RectDBID_RectDB)[rectDB_j_ID]

				return rectDB_i.SVG_RectsDBID_Index.Int64 < rectDB_j.SVG_RectsDBID_Index.Int64
			})

			// parse all TextDB and redeem the array of poiners to SVG
			// first reset the slice
			svg.Texts = svg.Texts[:0]
			for _, TextDB := range *backRepo.BackRepoText.Map_TextDBID_TextDB {
				if TextDB.SVG_TextsDBID.Int64 == int64(svgDB.ID) {
					Text := (*backRepo.BackRepoText.Map_TextDBID_TextPtr)[TextDB.ID]
					svg.Texts = append(svg.Texts, Text)
				}
			}
			
			// sort the array according to the order
			sort.Slice(svg.Texts, func(i, j int) bool {
				textDB_i_ID := (*backRepo.BackRepoText.Map_TextPtr_TextDBID)[svg.Texts[i]]
				textDB_j_ID := (*backRepo.BackRepoText.Map_TextPtr_TextDBID)[svg.Texts[j]]

				textDB_i := (*backRepo.BackRepoText.Map_TextDBID_TextDB)[textDB_i_ID]
				textDB_j := (*backRepo.BackRepoText.Map_TextDBID_TextDB)[textDB_j_ID]

				return textDB_i.SVG_TextsDBID_Index.Int64 < textDB_j.SVG_TextsDBID_Index.Int64
			})

			// parse all CircleDB and redeem the array of poiners to SVG
			// first reset the slice
			svg.Circles = svg.Circles[:0]
			for _, CircleDB := range *backRepo.BackRepoCircle.Map_CircleDBID_CircleDB {
				if CircleDB.SVG_CirclesDBID.Int64 == int64(svgDB.ID) {
					Circle := (*backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr)[CircleDB.ID]
					svg.Circles = append(svg.Circles, Circle)
				}
			}
			
			// sort the array according to the order
			sort.Slice(svg.Circles, func(i, j int) bool {
				circleDB_i_ID := (*backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID)[svg.Circles[i]]
				circleDB_j_ID := (*backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID)[svg.Circles[j]]

				circleDB_i := (*backRepo.BackRepoCircle.Map_CircleDBID_CircleDB)[circleDB_i_ID]
				circleDB_j := (*backRepo.BackRepoCircle.Map_CircleDBID_CircleDB)[circleDB_j_ID]

				return circleDB_i.SVG_CirclesDBID_Index.Int64 < circleDB_j.SVG_CirclesDBID_Index.Int64
			})

			// parse all LineDB and redeem the array of poiners to SVG
			// first reset the slice
			svg.Lines = svg.Lines[:0]
			for _, LineDB := range *backRepo.BackRepoLine.Map_LineDBID_LineDB {
				if LineDB.SVG_LinesDBID.Int64 == int64(svgDB.ID) {
					Line := (*backRepo.BackRepoLine.Map_LineDBID_LinePtr)[LineDB.ID]
					svg.Lines = append(svg.Lines, Line)
				}
			}
			
			// sort the array according to the order
			sort.Slice(svg.Lines, func(i, j int) bool {
				lineDB_i_ID := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[svg.Lines[i]]
				lineDB_j_ID := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[svg.Lines[j]]

				lineDB_i := (*backRepo.BackRepoLine.Map_LineDBID_LineDB)[lineDB_i_ID]
				lineDB_j := (*backRepo.BackRepoLine.Map_LineDBID_LineDB)[lineDB_j_ID]

				return lineDB_i.SVG_LinesDBID_Index.Int64 < lineDB_j.SVG_LinesDBID_Index.Int64
			})

			// parse all EllipseDB and redeem the array of poiners to SVG
			// first reset the slice
			svg.Ellipses = svg.Ellipses[:0]
			for _, EllipseDB := range *backRepo.BackRepoEllipse.Map_EllipseDBID_EllipseDB {
				if EllipseDB.SVG_EllipsesDBID.Int64 == int64(svgDB.ID) {
					Ellipse := (*backRepo.BackRepoEllipse.Map_EllipseDBID_EllipsePtr)[EllipseDB.ID]
					svg.Ellipses = append(svg.Ellipses, Ellipse)
				}
			}
			
			// sort the array according to the order
			sort.Slice(svg.Ellipses, func(i, j int) bool {
				ellipseDB_i_ID := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[svg.Ellipses[i]]
				ellipseDB_j_ID := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[svg.Ellipses[j]]

				ellipseDB_i := (*backRepo.BackRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB_i_ID]
				ellipseDB_j := (*backRepo.BackRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB_j_ID]

				return ellipseDB_i.SVG_EllipsesDBID_Index.Int64 < ellipseDB_j.SVG_EllipsesDBID_Index.Int64
			})

			// parse all PolylineDB and redeem the array of poiners to SVG
			// first reset the slice
			svg.Polylines = svg.Polylines[:0]
			for _, PolylineDB := range *backRepo.BackRepoPolyline.Map_PolylineDBID_PolylineDB {
				if PolylineDB.SVG_PolylinesDBID.Int64 == int64(svgDB.ID) {
					Polyline := (*backRepo.BackRepoPolyline.Map_PolylineDBID_PolylinePtr)[PolylineDB.ID]
					svg.Polylines = append(svg.Polylines, Polyline)
				}
			}
			
			// sort the array according to the order
			sort.Slice(svg.Polylines, func(i, j int) bool {
				polylineDB_i_ID := (*backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID)[svg.Polylines[i]]
				polylineDB_j_ID := (*backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID)[svg.Polylines[j]]

				polylineDB_i := (*backRepo.BackRepoPolyline.Map_PolylineDBID_PolylineDB)[polylineDB_i_ID]
				polylineDB_j := (*backRepo.BackRepoPolyline.Map_PolylineDBID_PolylineDB)[polylineDB_j_ID]

				return polylineDB_i.SVG_PolylinesDBID_Index.Int64 < polylineDB_j.SVG_PolylinesDBID_Index.Int64
			})

			// parse all PolygoneDB and redeem the array of poiners to SVG
			// first reset the slice
			svg.Polygones = svg.Polygones[:0]
			for _, PolygoneDB := range *backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygoneDB {
				if PolygoneDB.SVG_PolygonesDBID.Int64 == int64(svgDB.ID) {
					Polygone := (*backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygonePtr)[PolygoneDB.ID]
					svg.Polygones = append(svg.Polygones, Polygone)
				}
			}
			
			// sort the array according to the order
			sort.Slice(svg.Polygones, func(i, j int) bool {
				polygoneDB_i_ID := (*backRepo.BackRepoPolygone.Map_PolygonePtr_PolygoneDBID)[svg.Polygones[i]]
				polygoneDB_j_ID := (*backRepo.BackRepoPolygone.Map_PolygonePtr_PolygoneDBID)[svg.Polygones[j]]

				polygoneDB_i := (*backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygoneDB)[polygoneDB_i_ID]
				polygoneDB_j := (*backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygoneDB)[polygoneDB_j_ID]

				return polygoneDB_i.SVG_PolygonesDBID_Index.Int64 < polygoneDB_j.SVG_PolygonesDBID_Index.Int64
			})

			// parse all PathDB and redeem the array of poiners to SVG
			// first reset the slice
			svg.Paths = svg.Paths[:0]
			for _, PathDB := range *backRepo.BackRepoPath.Map_PathDBID_PathDB {
				if PathDB.SVG_PathsDBID.Int64 == int64(svgDB.ID) {
					Path := (*backRepo.BackRepoPath.Map_PathDBID_PathPtr)[PathDB.ID]
					svg.Paths = append(svg.Paths, Path)
				}
			}
			
			// sort the array according to the order
			sort.Slice(svg.Paths, func(i, j int) bool {
				pathDB_i_ID := (*backRepo.BackRepoPath.Map_PathPtr_PathDBID)[svg.Paths[i]]
				pathDB_j_ID := (*backRepo.BackRepoPath.Map_PathPtr_PathDBID)[svg.Paths[j]]

				pathDB_i := (*backRepo.BackRepoPath.Map_PathDBID_PathDB)[pathDB_i_ID]
				pathDB_j := (*backRepo.BackRepoPath.Map_PathDBID_PathDB)[pathDB_j_ID]

				return pathDB_i.SVG_PathsDBID_Index.Int64 < pathDB_j.SVG_PathsDBID_Index.Int64
			})

		}
	}
	return
}

// CommitSVG allows commit of a single svg (if already staged)
func (backRepo *BackRepoStruct) CommitSVG(svg *models.SVG) {
	backRepo.BackRepoSVG.CommitPhaseOneInstance(svg)
	if id, ok := (*backRepo.BackRepoSVG.Map_SVGPtr_SVGDBID)[svg]; ok {
		backRepo.BackRepoSVG.CommitPhaseTwoInstance(backRepo, id, svg)
	}
}

// CommitSVG allows checkout of a single svg (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSVG(svg *models.SVG) {
	// check if the svg is staged
	if _, ok := (*backRepo.BackRepoSVG.Map_SVGPtr_SVGDBID)[svg]; ok {

		if id, ok := (*backRepo.BackRepoSVG.Map_SVGPtr_SVGDBID)[svg]; ok {
			var svgDB SVGDB
			svgDB.ID = id

			if err := backRepo.BackRepoSVG.db.First(&svgDB, id).Error; err != nil {
				log.Panicln("CheckoutSVG : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSVG.CheckoutPhaseOneInstance(&svgDB)
			backRepo.BackRepoSVG.CheckoutPhaseTwoInstance(backRepo, &svgDB)
		}
	}
}
