// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Text sql.NullBool
var __Text_time__dummyDeclaration time.Duration
var dummy_Text_sort sort.Float64Slice

// TextAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model textAPI
type TextAPI struct {
	gorm.Model

	models.Text

	// encoding of pointers
	TextPointersEnconding
}

// TextPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TextPointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// Implementation of a reverse ID for field SVG{}.Texts []*Text
	SVG_TextsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	SVG_TextsDBID_Index sql.NullInt64
}

// TextDB describes a text in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model textDB
type TextDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field textDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field textDB.X {{BasicKind}} (to be completed)
	X_Data sql.NullFloat64

	// Declation for basic field textDB.Y {{BasicKind}} (to be completed)
	Y_Data sql.NullFloat64

	// Declation for basic field textDB.Content {{BasicKind}} (to be completed)
	Content_Data sql.NullString

	// Declation for basic field textDB.Color {{BasicKind}} (to be completed)
	Color_Data sql.NullString

	// Declation for basic field textDB.FillOpacity {{BasicKind}} (to be completed)
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field textDB.Stroke {{BasicKind}} (to be completed)
	Stroke_Data sql.NullString

	// Declation for basic field textDB.StrokeWidth {{BasicKind}} (to be completed)
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field textDB.StrokeDashArray {{BasicKind}} (to be completed)
	StrokeDashArray_Data sql.NullString

	// Declation for basic field textDB.Transform {{BasicKind}} (to be completed)
	Transform_Data sql.NullString

	// encoding of pointers
	TextPointersEnconding
}

// TextDBs arrays textDBs
// swagger:response textDBsResponse
type TextDBs []TextDB

// TextDBResponse provides response
// swagger:response textDBResponse
type TextDBResponse struct {
	TextDB
}

type BackRepoTextStruct struct {
	// stores TextDB according to their gorm ID
	Map_TextDBID_TextDB *map[uint]*TextDB

	// stores TextDB ID according to Text address
	Map_TextPtr_TextDBID *map[*models.Text]uint

	// stores Text according to their gorm ID
	Map_TextDBID_TextPtr *map[uint]*models.Text

	db *gorm.DB
}

func (backRepoText *BackRepoTextStruct) GetDB() *gorm.DB {
	return backRepoText.db
}

// GetTextDBFromTextPtr is a handy function to access the back repo instance from the stage instance
func (backRepoText *BackRepoTextStruct) GetTextDBFromTextPtr(text *models.Text) (textDB *TextDB) {
	id := (*backRepoText.Map_TextPtr_TextDBID)[text]
	textDB = (*backRepoText.Map_TextDBID_TextDB)[id]
	return
}

// BackRepoText.Init set up the BackRepo of the Text
func (backRepoText *BackRepoTextStruct) Init(db *gorm.DB) (Error error) {

	if backRepoText.Map_TextDBID_TextPtr != nil {
		err := errors.New("In Init, backRepoText.Map_TextDBID_TextPtr should be nil")
		return err
	}

	if backRepoText.Map_TextDBID_TextDB != nil {
		err := errors.New("In Init, backRepoText.Map_TextDBID_TextDB should be nil")
		return err
	}

	if backRepoText.Map_TextPtr_TextDBID != nil {
		err := errors.New("In Init, backRepoText.Map_TextPtr_TextDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Text, 0)
	backRepoText.Map_TextDBID_TextPtr = &tmp

	tmpDB := make(map[uint]*TextDB, 0)
	backRepoText.Map_TextDBID_TextDB = &tmpDB

	tmpID := make(map[*models.Text]uint, 0)
	backRepoText.Map_TextPtr_TextDBID = &tmpID

	backRepoText.db = db
	return
}

// BackRepoText.CommitPhaseOne commits all staged instances of Text to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoText *BackRepoTextStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for text := range stage.Texts {
		backRepoText.CommitPhaseOneInstance(text)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, text := range *backRepoText.Map_TextDBID_TextPtr {
		if _, ok := stage.Texts[text]; !ok {
			backRepoText.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoText.CommitDeleteInstance commits deletion of Text to the BackRepo
func (backRepoText *BackRepoTextStruct) CommitDeleteInstance(id uint) (Error error) {

	text := (*backRepoText.Map_TextDBID_TextPtr)[id]

	// text is not staged anymore, remove textDB
	textDB := (*backRepoText.Map_TextDBID_TextDB)[id]
	query := backRepoText.db.Unscoped().Delete(&textDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoText.Map_TextPtr_TextDBID), text)
	delete((*backRepoText.Map_TextDBID_TextPtr), id)
	delete((*backRepoText.Map_TextDBID_TextDB), id)

	return
}

// BackRepoText.CommitPhaseOneInstance commits text staged instances of Text to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoText *BackRepoTextStruct) CommitPhaseOneInstance(text *models.Text) (Error error) {

	// check if the text is not commited yet
	if _, ok := (*backRepoText.Map_TextPtr_TextDBID)[text]; ok {
		return
	}

	// initiate text
	var textDB TextDB
	textDB.CopyBasicFieldsFromText(text)

	query := backRepoText.db.Create(&textDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoText.Map_TextPtr_TextDBID)[text] = textDB.ID
	(*backRepoText.Map_TextDBID_TextPtr)[textDB.ID] = text
	(*backRepoText.Map_TextDBID_TextDB)[textDB.ID] = &textDB

	return
}

// BackRepoText.CommitPhaseTwo commits all staged instances of Text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText *BackRepoTextStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, text := range *backRepoText.Map_TextDBID_TextPtr {
		backRepoText.CommitPhaseTwoInstance(backRepo, idx, text)
	}

	return
}

// BackRepoText.CommitPhaseTwoInstance commits {{structname }} of models.Text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText *BackRepoTextStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, text *models.Text) (Error error) {

	// fetch matching textDB
	if textDB, ok := (*backRepoText.Map_TextDBID_TextDB)[idx]; ok {

		textDB.CopyBasicFieldsFromText(text)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoText.db.Save(&textDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Text intance %s", text.Name))
		return err
	}

	return
}

// BackRepoText.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoText *BackRepoTextStruct) CheckoutPhaseOne() (Error error) {

	textDBArray := make([]TextDB, 0)
	query := backRepoText.db.Find(&textDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, textDB := range textDBArray {
		backRepoText.CheckoutPhaseOneInstance(&textDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a textDB that has been found in the DB, updates the backRepo and stages the
// models version of the textDB
func (backRepoText *BackRepoTextStruct) CheckoutPhaseOneInstance(textDB *TextDB) (Error error) {

	text, ok := (*backRepoText.Map_TextDBID_TextPtr)[textDB.ID]
	if !ok {
		text = new(models.Text)

		(*backRepoText.Map_TextDBID_TextPtr)[textDB.ID] = text
		(*backRepoText.Map_TextPtr_TextDBID)[text] = textDB.ID

		// append model store with the new element
		text.Stage()
	}
	textDB.CopyBasicFieldsToText(text)

	// preserve pointer to aclassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TextDBID_TextDB)[textDB hold variable pointers
	textDB_Data := *textDB
	preservedPtrToText := &textDB_Data
	(*backRepoText.Map_TextDBID_TextDB)[textDB.ID] = preservedPtrToText

	return
}

// BackRepoText.CheckoutPhaseTwo Checkouts all staged instances of Text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText *BackRepoTextStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, textDB := range *backRepoText.Map_TextDBID_TextDB {
		backRepoText.CheckoutPhaseTwoInstance(backRepo, textDB)
	}
	return
}

// BackRepoText.CheckoutPhaseTwoInstance Checkouts staged instances of Text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText *BackRepoTextStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, textDB *TextDB) (Error error) {

	text := (*backRepoText.Map_TextDBID_TextPtr)[textDB.ID]
	_ = text // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitText allows commit of a single text (if already staged)
func (backRepo *BackRepoStruct) CommitText(text *models.Text) {
	backRepo.BackRepoText.CommitPhaseOneInstance(text)
	if id, ok := (*backRepo.BackRepoText.Map_TextPtr_TextDBID)[text]; ok {
		backRepo.BackRepoText.CommitPhaseTwoInstance(backRepo, id, text)
	}
}

// CommitText allows checkout of a single text (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutText(text *models.Text) {
	// check if the text is staged
	if _, ok := (*backRepo.BackRepoText.Map_TextPtr_TextDBID)[text]; ok {

		if id, ok := (*backRepo.BackRepoText.Map_TextPtr_TextDBID)[text]; ok {
			var textDB TextDB
			textDB.ID = id

			if err := backRepo.BackRepoText.db.First(&textDB, id).Error; err != nil {
				log.Panicln("CheckoutText : Problem with getting object with id:", id)
			}
			backRepo.BackRepoText.CheckoutPhaseOneInstance(&textDB)
			backRepo.BackRepoText.CheckoutPhaseTwoInstance(backRepo, &textDB)
		}
	}
}

// CopyBasicFieldsToTextDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (textDB *TextDB) CopyBasicFieldsFromText(text *models.Text) {
	// insertion point for fields commit
	textDB.Name_Data.String = text.Name
	textDB.Name_Data.Valid = true

	textDB.X_Data.Float64 = text.X
	textDB.X_Data.Valid = true

	textDB.Y_Data.Float64 = text.Y
	textDB.Y_Data.Valid = true

	textDB.Content_Data.String = text.Content
	textDB.Content_Data.Valid = true

	textDB.Color_Data.String = text.Color
	textDB.Color_Data.Valid = true

	textDB.FillOpacity_Data.Float64 = text.FillOpacity
	textDB.FillOpacity_Data.Valid = true

	textDB.Stroke_Data.String = text.Stroke
	textDB.Stroke_Data.Valid = true

	textDB.StrokeWidth_Data.Float64 = text.StrokeWidth
	textDB.StrokeWidth_Data.Valid = true

	textDB.StrokeDashArray_Data.String = text.StrokeDashArray
	textDB.StrokeDashArray_Data.Valid = true

	textDB.Transform_Data.String = text.Transform
	textDB.Transform_Data.Valid = true

}

// CopyBasicFieldsToTextDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (textDB *TextDB) CopyBasicFieldsToText(text *models.Text) {

	// insertion point for checkout of basic fields (back repo to stage)
	text.Name = textDB.Name_Data.String
	text.X = textDB.X_Data.Float64
	text.Y = textDB.Y_Data.Float64
	text.Content = textDB.Content_Data.String
	text.Color = textDB.Color_Data.String
	text.FillOpacity = textDB.FillOpacity_Data.Float64
	text.Stroke = textDB.Stroke_Data.String
	text.StrokeWidth = textDB.StrokeWidth_Data.Float64
	text.StrokeDashArray = textDB.StrokeDashArray_Data.String
	text.Transform = textDB.Transform_Data.String
}

// Backup generates a json file from a slice of all TextDB instances in the backrepo
func (backRepoText *BackRepoTextStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TextDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	var forBackup []*TextDB
	for _, textDB := range *backRepoText.Map_TextDBID_TextDB {
		forBackup = append(forBackup, textDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Text ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Text file", err.Error())
	}
}

func (backRepoText *BackRepoTextStruct) Restore(dirPath string) {

	filename := filepath.Join(dirPath, "TextDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Text file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TextDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TextDBID_TextDB
	for _, textDB := range forRestore {

		textDB_ID := textDB.ID
		textDB.ID = 0
		query := backRepoText.db.Create(textDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		if textDB_ID != textDB.ID {
			log.Panicf("ID of Text restore ID %d, name %s, has wrong ID %d in DB after create",
				textDB_ID, textDB.Name_Data.String, textDB.ID)
		}
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Text file", err.Error())
	}
}
