// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { LineDB } from '../line-db'
import { LineService } from '../line.service'

import { FrontRepoService, FrontRepo } from '../front-repo.service'

// generated table component
@Component({
  selector: 'app-linestable',
  templateUrl: './lines-table.component.html',
  styleUrls: ['./lines-table.component.css'],
})
export class LinesTableComponent implements OnInit {

  // used if the component is called as a selection component of Line instances
  selection: SelectionModel<LineDB>;
  initialSelection = new Array<LineDB>();

  // the data source for the table
  lines: LineDB[];
  matTableDataSource: MatTableDataSource<LineDB>


  // front repo, that will be referenced by this.lines
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {

	// enable sorting on all fields (including pointers and reverse pointer)
	this.matTableDataSource.sortingDataAccessor = (lineDB: LineDB, property: string) => {
		switch (property) {
				// insertion point for specific sorting accessor
			case 'Name':
				return lineDB.Name;

			case 'X1':
				return lineDB.X1;

			case 'Y1':
				return lineDB.Y1;

			case 'X2':
				return lineDB.X2;

			case 'Y2':
				return lineDB.Y2;

			case 'Color':
				return lineDB.Color;

			case 'FillOpacity':
				return lineDB.FillOpacity;

			case 'Stroke':
				return lineDB.Stroke;

			case 'StrokeWidth':
				return lineDB.StrokeWidth;

			case 'StrokeDashArray':
				return lineDB.StrokeDashArray;

			case 'Transform':
				return lineDB.Transform;

				case 'Lines':
					return this.frontRepo.SVGs.get(lineDB.SVG_LinesDBID.Int64)?.Name;

				default:
					return LineDB[property];
		}
	}; 

	// enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
	this.matTableDataSource.filterPredicate = (lineDB: LineDB, filter: string) => {

		// filtering is based on finding a lower case filter into a concatenated string
		// the lineDB properties
		let mergedContent = ""

		// insertion point for merging of fields
		mergedContent += lineDB.Name.toLowerCase()
		mergedContent += lineDB.X1.toString()
		mergedContent += lineDB.Y1.toString()
		mergedContent += lineDB.X2.toString()
		mergedContent += lineDB.Y2.toString()
		mergedContent += lineDB.Color.toLowerCase()
		mergedContent += lineDB.FillOpacity.toString()
		mergedContent += lineDB.Stroke.toLowerCase()
		mergedContent += lineDB.StrokeWidth.toString()
		mergedContent += lineDB.StrokeDashArray.toLowerCase()
		mergedContent += lineDB.Transform.toLowerCase()
		if (lineDB.SVG_LinesDBID.Int64 != 0) {
        	mergedContent += this.frontRepo.SVGs.get(lineDB.SVG_LinesDBID.Int64)?.Name.toLowerCase()
    	}


		let isSelected = mergedContent.includes(filter.toLowerCase())
		return isSelected
	};

    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private lineService: LineService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of line instances
    public dialogRef: MatDialogRef<LinesTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {
    // observable for changes in structs
    this.lineService.LineServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getLines()
        }
      }
    )
    if (dialogData == undefined) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "X1",
        "Y1",
        "X2",
        "Y2",
        "Color",
        "FillOpacity",
        "Stroke",
        "StrokeWidth",
        "StrokeDashArray",
        "Transform",
        "Lines",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "X1",
        "Y1",
        "X2",
        "Y2",
        "Color",
        "FillOpacity",
        "Stroke",
        "StrokeWidth",
        "StrokeDashArray",
        "Transform",
        "Lines",
      ]
      this.selection = new SelectionModel<LineDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getLines()
    this.matTableDataSource = new MatTableDataSource(this.lines)
  }

  getLines(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.lines = this.frontRepo.Lines_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.dialogData != undefined) {
          this.lines.forEach(
            line => {
              let ID = this.dialogData.ID
              let revPointer = line[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(line)
              }
            }
          )
          this.selection = new SelectionModel<LineDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.lines
      }
    )
  }

  // newLine initiate a new line
  // create a new Line objet
  newLine() {
  }

  deleteLine(lineID: number, line: LineDB) {
    // list of lines is truncated of line before the delete
    this.lines = this.lines.filter(h => h !== line);

    this.lineService.deleteLine(lineID).subscribe(
      line => {
        this.lineService.LineServiceChanged.next("delete")
      }
    );
  }

  editLine(lineID: number, line: LineDB) {

  }

  // display line in router
  displayLineInRouter(lineID: number) {
    this.router.navigate(["github_com_fullstack_lang_gongsvg_go-" + "line-display", lineID])
  }

  // set editor outlet
  setEditorRouterOutlet(lineID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongsvg_go_editor: ["github_com_fullstack_lang_gongsvg_go-" + "line-detail", lineID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(lineID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongsvg_go_presentation: ["github_com_fullstack_lang_gongsvg_go-" + "line-presentation", lineID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.lines.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.lines.forEach(row => this.selection.select(row));
  }

  save() {

    let toUpdate = new Set<LineDB>()

    // reset all initial selection of line that belong to line through Anarrayofb
    this.initialSelection.forEach(
      line => {
        line[this.dialogData.ReversePointer].Int64 = 0
        line[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(line)
      }
    )

    // from selection, set line that belong to line through Anarrayofb
    this.selection.selected.forEach(
      line => {
        let ID = +this.dialogData.ID
        line[this.dialogData.ReversePointer].Int64 = ID
        line[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(line)
      }
    )

    // update all line (only update selection & initial selection)
    toUpdate.forEach(
      line => {
        this.lineService.updateLine(line)
          .subscribe(line => {
            this.lineService.LineServiceChanged.next("update")
          });
      }
    )
    this.dialogRef.close('Pizza!');
  }
}
