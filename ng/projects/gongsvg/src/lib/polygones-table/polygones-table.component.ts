// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { PolygoneDB } from '../polygone-db'
import { PolygoneService } from '../polygone.service'

import { FrontRepoService, FrontRepo } from '../front-repo.service'

// generated table component
@Component({
  selector: 'app-polygones-table',
  templateUrl: './polygones-table.component.html',
  styleUrls: ['./polygones-table.component.css'],
})
export class PolygonesTableComponent implements OnInit {

  // used if the component is called as a selection component of Polygone instances
  selection: SelectionModel<PolygoneDB>;
  initialSelection = new Array<PolygoneDB>();

  // the data source for the table
  polygones: PolygoneDB[];
  matTableDataSource: MatTableDataSource<PolygoneDB>


  // front repo, that will be referenced by this.polygones
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {
    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private polygoneService: PolygoneService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of polygone instances
    public dialogRef: MatDialogRef<PolygonesTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {
    // https://stackoverflow.com/questions/54627478/angular-7-routing-to-same-component-but-different-param-not-working
    // this is for routerLink on same component when only queryParameter changes
    this.router.routeReuseStrategy.shouldReuseRoute = function () {
      return false;
    };

    // observable for changes in structs
    this.polygoneService.PolygoneServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getPolygones()
        }
      }
    )
    if (dialogData == undefined) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "Points",
        "Color",
        "FillOpacity",
        "Stroke",
        "StrokeWidth",
        "StrokeDashArray",
        "Polygones",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "Points",
        "Color",
        "FillOpacity",
        "Stroke",
        "StrokeWidth",
        "StrokeDashArray",
        "Polygones",
      ]
      this.selection = new SelectionModel<PolygoneDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getPolygones()
    this.matTableDataSource = new MatTableDataSource(this.polygones)
  }

  getPolygones(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo
        console.log("front repo pull returned")

        this.polygones = this.frontRepo.Polygones_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.dialogData != undefined) {
          this.polygones.forEach(
            polygone => {
              let ID = this.dialogData.ID
              let revPointer = polygone[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(polygone)
              }
            }
          )
          this.selection = new SelectionModel<PolygoneDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.polygones
      }
    )
  }

  // newPolygone initiate a new polygone
  // create a new Polygone objet
  newPolygone() {
  }

  deletePolygone(polygoneID: number, polygone: PolygoneDB) {
    // list of polygones is truncated of polygone before the delete
    this.polygones = this.polygones.filter(h => h !== polygone);

    this.polygoneService.deletePolygone(polygoneID).subscribe(
      polygone => {
        this.polygoneService.PolygoneServiceChanged.next("delete")

        console.log("polygone deleted")
      }
    );
  }

  editPolygone(polygoneID: number, polygone: PolygoneDB) {

  }

  // display polygone in router
  displayPolygoneInRouter(polygoneID: number) {
    this.router.navigate(["polygone-display", polygoneID])
  }

  // set editor outlet
  setEditorRouterOutlet(polygoneID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["polygone-detail", polygoneID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(polygoneID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["polygone-presentation", polygoneID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.polygones.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.polygones.forEach(row => this.selection.select(row));
  }

  save() {

    let toUpdate = new Set<PolygoneDB>()

    // reset all initial selection of polygone that belong to polygone through Anarrayofb
    this.initialSelection.forEach(
      polygone => {
        polygone[this.dialogData.ReversePointer].Int64 = 0
        polygone[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(polygone)
      }
    )

    // from selection, set polygone that belong to polygone through Anarrayofb
    this.selection.selected.forEach(
      polygone => {
        console.log("selection ID " + polygone.ID)
        let ID = +this.dialogData.ID
        polygone[this.dialogData.ReversePointer].Int64 = ID
        polygone[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(polygone)
      }
    )

    // update all polygone (only update selection & initial selection)
    toUpdate.forEach(
      polygone => {
        this.polygoneService.updatePolygone(polygone)
          .subscribe(polygone => {
            this.polygoneService.PolygoneServiceChanged.next("update")
            console.log("polygone saved")
          });
      }
    )
    this.dialogRef.close('Pizza!');
  }
}
