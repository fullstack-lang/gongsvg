// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { PolylineDB } from '../polyline-db'
import { PolylineService } from '../polyline.service'

import { FrontRepoService, FrontRepo } from '../front-repo.service'

// generated table component
@Component({
  selector: 'app-polylines-table',
  templateUrl: './polylines-table.component.html',
  styleUrls: ['./polylines-table.component.css'],
})
export class PolylinesTableComponent implements OnInit {

  // used if the component is called as a selection component of Polyline instances
  selection: SelectionModel<PolylineDB>;
  initialSelection = new Array<PolylineDB>();

  // the data source for the table
  polylines: PolylineDB[];
  matTableDataSource: MatTableDataSource<PolylineDB>


  // front repo, that will be referenced by this.polylines
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {
    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private polylineService: PolylineService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of polyline instances
    public dialogRef: MatDialogRef<PolylinesTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {
    // https://stackoverflow.com/questions/54627478/angular-7-routing-to-same-component-but-different-param-not-working
    // this is for routerLink on same component when only queryParameter changes
    this.router.routeReuseStrategy.shouldReuseRoute = function () {
      return false;
    };

    // observable for changes in structs
    this.polylineService.PolylineServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getPolylines()
        }
      }
    )
    if (dialogData == undefined) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "Points",
        "Color",
        "FillOpacity",
        "Stroke",
        "StrokeWidth",
        "StrokeDashArray",
        "Transform",
        "Polylines",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "Points",
        "Color",
        "FillOpacity",
        "Stroke",
        "StrokeWidth",
        "StrokeDashArray",
        "Transform",
        "Polylines",
      ]
      this.selection = new SelectionModel<PolylineDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getPolylines()
    this.matTableDataSource = new MatTableDataSource(this.polylines)
  }

  getPolylines(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo
        console.log("front repo pull returned")

        this.polylines = this.frontRepo.Polylines_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.dialogData != undefined) {
          this.polylines.forEach(
            polyline => {
              let ID = this.dialogData.ID
              let revPointer = polyline[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(polyline)
              }
            }
          )
          this.selection = new SelectionModel<PolylineDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.polylines
      }
    )
  }

  // newPolyline initiate a new polyline
  // create a new Polyline objet
  newPolyline() {
  }

  deletePolyline(polylineID: number, polyline: PolylineDB) {
    // list of polylines is truncated of polyline before the delete
    this.polylines = this.polylines.filter(h => h !== polyline);

    this.polylineService.deletePolyline(polylineID).subscribe(
      polyline => {
        this.polylineService.PolylineServiceChanged.next("delete")

        console.log("polyline deleted")
      }
    );
  }

  editPolyline(polylineID: number, polyline: PolylineDB) {

  }

  // display polyline in router
  displayPolylineInRouter(polylineID: number) {
    this.router.navigate(["polyline-display", polylineID])
  }

  // set editor outlet
  setEditorRouterOutlet(polylineID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["polyline-detail", polylineID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(polylineID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["polyline-presentation", polylineID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.polylines.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.polylines.forEach(row => this.selection.select(row));
  }

  save() {

    let toUpdate = new Set<PolylineDB>()

    // reset all initial selection of polyline that belong to polyline through Anarrayofb
    this.initialSelection.forEach(
      polyline => {
        polyline[this.dialogData.ReversePointer].Int64 = 0
        polyline[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(polyline)
      }
    )

    // from selection, set polyline that belong to polyline through Anarrayofb
    this.selection.selected.forEach(
      polyline => {
        console.log("selection ID " + polyline.ID)
        let ID = +this.dialogData.ID
        polyline[this.dialogData.ReversePointer].Int64 = ID
        polyline[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(polyline)
      }
    )

    // update all polyline (only update selection & initial selection)
    toUpdate.forEach(
      polyline => {
        this.polylineService.updatePolyline(polyline)
          .subscribe(polyline => {
            this.polylineService.PolylineServiceChanged.next("update")
            console.log("polyline saved")
          });
      }
    )
    this.dialogRef.close('Pizza!');
  }
}
